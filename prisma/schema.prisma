generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN_GLOBAL
  AGENCY
  ADMIN_AGENCY
  USER
}

model User {
  id         String    @id @default(cuid()) // Menggunakan cuid() untuk MySQL
  agency_id  String?   // Hapus @db.Uuid untuk MySQL
  username   String
  email      String
  password   String
  full_name  String
  no_wa      String?
  role       UserRole  @default(USER)
  is_active  Boolean   @default(true)
  last_login DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  agency            Agency?            @relation("AgencyUsers", fields: [agency_id], references: [id])
  ownedAgency       Agency[]           @relation("AgencyOwner")
  contactTags       ContactTag[]
  contacts          Contact[]
  userSubscriptions UserSubscription[]
  orders            Order[]
}

model Agency {
  id           String   @id @default(cuid()) // Menggunakan cuid() untuk MySQL
  owner_id     String   // Hapus @db.Uuid untuk MySQL
  name         String
  slug         String
  domain       String?
  company_name String?
  tagline      String?
  logo_url     String?
  favicon_url  String?
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  owner         User           @relation("AgencyOwner", fields: [owner_id], references: [id])
  users         User[]         @relation("AgencyUsers")
  subscriptions Subscription[]
}

model ContactTag {
  id         Int      @id @default(autoincrement())
  name       String
  user_id    String   // Hapus @db.Uuid untuk MySQL
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User      @relation(fields: [user_id], references: [id])
  contacts Contact[]
}

model Contact {
  id      Int     @id @default(autoincrement())
  name    String
  phone   String
  email   String?
  notes   String?
  user_id String  // Hapus @db.Uuid untuk MySQL
  tag_id  Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User        @relation(fields: [user_id], references: [id])
  tag  ContactTag? @relation(fields: [tag_id], references: [id])
}

model Subscription {
  id            Int      @id @default(autoincrement())
  owner_id      String   // Hapus @db.Uuid untuk MySQL
  name          String
  duration_days Int
  limit_device  Int      @default(1)
  description   String?
  price         Decimal  @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  owner             Agency             @relation(fields: [owner_id], references: [id])
  userSubscriptions UserSubscription[]
  orders            Order[]
}

model UserSubscription {
  id              Int      @id @default(autoincrement())
  user_id         String   // Hapus @db.Uuid untuk MySQL
  subscription_id Int
  status          String   @default("ACTIVE")
  start_date      DateTime
  end_date        DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user         User         @relation(fields: [user_id], references: [id])
  subscription Subscription @relation(fields: [subscription_id], references: [id])
}

model Order {
  id              String        @id @default(cuid()) // Menggunakan cuid() untuk MySQL
  user_id         String        // Hapus @db.Uuid untuk MySQL
  subscription_id Int
  amount          Decimal       @default(0)
  payment_method  String?
  payment_status  String        @default("PENDING")
  snap_token      String?
  payment_url     String?
  metadata        Json?
  invoice_number  String?       @unique
  external_id     String?
  expired_at      DateTime?
  paid_at         DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  user         User         @relation(fields: [user_id], references: [id])
  subscription Subscription @relation(fields: [subscription_id], references: [id])
}