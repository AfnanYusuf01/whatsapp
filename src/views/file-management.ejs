<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        .upload-zone {
            border: 2px dashed #e5e7eb;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f9fafb;
        }
        .upload-zone:hover {
            border-color: #3b82f6;
            background: #eff6ff;
        }
        .upload-zone.dragover {
            border-color: #10b981;
            background: #d1fae5;
        }
        .file-card {
            transition: all 0.2s ease;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            background: white;
        }
        .file-card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-color: #3b82f6;
        }
        .file-preview {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            border: 1px solid #e5e7eb;
        }
        .file-icon {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            background: linear-gradient(45deg, #3b82f6, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
        }
        .progress-container {
            display: none;
            margin-top: 15px;
        }
        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
        }
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 300px;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        }
        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <a href="/dashboard" class="text-xl font-bold text-gray-800">Dashboard</a>
                    <span class="mx-2">/</span>
                    <h1 class="text-xl font-bold"><%= title %></h1>
                </div>
                <div class="flex items-center">
                    <span class="mr-4">Welcome, <%= user.full_name %></span>
                    <a href="/logout" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
            <!-- Header -->
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h2 class="text-2xl font-bold">File Management</h2>
                    <p class="text-gray-600">Upload, manage, and send files via WhatsApp</p>
                </div>
                <div class="flex space-x-3">
                    <button onclick="loadUserFiles()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button onclick="loadUserStats()" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                        <i class="bi bi-bar-chart"></i> View Stats
                    </button>
                </div>
            </div>

            <!-- Stats Panel -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="text-center">
                        <div class="text-2xl font-bold text-blue-600" id="totalFiles">0</div>
                        <div class="text-gray-600">Total Files</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-green-600" id="totalSize">0 MB</div>
                        <div class="text-gray-600">Total Size</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold text-purple-600" id="userInfo"><%= user.full_name %></div>
                        <div class="text-gray-600">User ID: <%= user.id %></div>
                    </div>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Upload Section -->
                <div class="bg-white rounded-lg shadow">
                    <div class="p-6 border-b border-gray-200">
                        <h3 class="text-lg font-semibold">
                            <i class="bi bi-cloud-upload text-blue-600"></i> Upload Files
                        </h3>
                    </div>
                    <div class="p-6">
                        <!-- Upload Zone -->
                        <div class="upload-zone" id="uploadZone">
                            <i class="bi bi-cloud-upload text-4xl text-gray-400 mb-3"></i>
                            <h5 class="text-lg font-medium">Drag files here or click to browse</h5>
                            <p class="text-gray-500 mb-3">Supports images, videos, documents, and audio files</p>
                            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                <i class="bi bi-folder"></i> Choose Files
                            </button>
                            <input type="file" id="fileInput" class="hidden" multiple 
                                   accept="image/*,video/*,.pdf,.doc,.docx,.txt,.mp3,.wav,.ogg">
                        </div>

                        <!-- Upload Form -->
                        <div class="mt-4">
                            <label for="fileDescription" class="block text-sm font-medium text-gray-700 mb-2">
                                Description (Optional)
                            </label>
                            <input type="text" id="fileDescription" 
                                   class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="Enter file description...">
                        </div>

                        <!-- Expires In Field -->
                        <div class="mt-4">
                            <label for="expiresIn" class="block text-sm font-medium text-gray-700 mb-2">
                                Expires In (Optional)
                            </label>
                            <select id="expiresIn" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                <option value="">Never expires</option>
                                <option value="24">24 hours</option>
                                <option value="168">1 week</option>
                                <option value="720">1 month</option>
                            </select>
                        </div>

                        <!-- Progress Bar -->
                        <div class="progress-container mt-4">
                            <div class="flex justify-between items-center mb-2">
                                <span class="text-sm text-gray-600">Uploading...</span>
                                <span class="text-sm text-gray-600" id="uploadPercent">0%</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2">
                                <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                                     id="uploadProgress" style="width: 0%"></div>
                            </div>
                        </div>

                        <!-- Upload Button -->
                        <button id="uploadBtn" disabled
                                class="w-full mt-4 bg-green-500 hover:bg-green-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded">
                            <i class="bi bi-upload"></i> Upload Selected Files
                        </button>
                    </div>
                </div>

                <!-- File List -->
                <div class="bg-white rounded-lg shadow">
                    <div class="p-6 border-b border-gray-200">
                        <div class="flex justify-between items-center">
                            <h3 class="text-lg font-semibold">
                                <i class="bi bi-files text-blue-600"></i> My Files
                            </h3>
                            <div class="flex space-x-2">
                                <select id="fileTypeFilter" class="border border-gray-300 rounded-md px-3 py-1 text-sm">
                                    <option value="">All Types</option>
                                    <option value="image">Images</option>
                                    <option value="video">Videos</option>
                                    <option value="document">Documents</option>
                                    <option value="audio">Audio</option>
                                </select>
                                <select id="sortBy" class="border border-gray-300 rounded-md px-3 py-1 text-sm">
                                    <option value="createdAt">Newest First</option>
                                    <option value="size">Size</option>
                                    <option value="name">Name</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="p-6 max-h-96 overflow-y-auto">
                        <div id="filesList">
                            <div class="text-center py-8 text-gray-500">
                                <i class="bi bi-files text-4xl mb-3"></i>
                                <p>No files uploaded yet</p>
                                <small>Upload some files to see them here</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Bulk Actions -->
            <div id="bulkActionsCard" class="bg-white rounded-lg shadow mt-6" style="display: none;">
                <div class="p-6">
                    <h4 class="text-lg font-semibold mb-4">
                        <i class="bi bi-check-square text-blue-600"></i> Bulk Actions
                    </h4>
                    <div class="flex space-x-3">
                        <button id="bulkDeleteBtn" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                            <i class="bi bi-trash"></i> Delete Selected (<span id="selectedCount">0</span>)
                        </button>
                        <button id="selectAllBtn" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            <i class="bi bi-check-all"></i> Select All
                        </button>
                        <button id="clearSelectionBtn" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            <i class="bi bi-square"></i> Clear Selection
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Send File Modal -->
    <div id="sendFileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-bold text-gray-900 mb-4">
                    <i class="bi bi-whatsapp text-green-600"></i> Send File via WhatsApp
                </h3>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">File</label>
                    <div class="flex items-center">
                        <div id="sendFilePreview" class="mr-3"></div>
                        <div>
                            <div class="font-bold" id="sendFileName">filename.jpg</div>
                            <small class="text-gray-500" id="sendFileInfo">Type • Size</small>
                        </div>
                    </div>
                </div>
                <div class="mb-4">
                    <label for="sendToNumber" class="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
                    <input type="text" id="sendToNumber" 
                           class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                           placeholder="628123456789" required>
                    <small class="text-gray-500">Enter phone number with country code (e.g., 628123456789)</small>
                </div>
                <div class="mb-4">
                    <label for="sendCaption" class="block text-sm font-medium text-gray-700 mb-2">Caption (Optional)</label>
                    <textarea id="sendCaption" rows="3" 
                              class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                              placeholder="Enter a caption for your file..."></textarea>
                </div>
                <div class="flex justify-end space-x-3">
                    <button onclick="closeSendModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
                        Cancel
                    </button>
                    <button onclick="sendFile()" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                        <i class="bi bi-send"></i> Send File
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let selectedFiles = [];
        let allFiles = [];
        let selectedFileIds = [];
        let currentFileToSend = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            loadUserFiles();
            loadUserStats();
        });

        function setupEventListeners() {
            // Upload zone events
            const uploadZone = document.getElementById('uploadZone');
            const fileInput = document.getElementById('fileInput');

            uploadZone.addEventListener('click', () => fileInput.click());
            uploadZone.addEventListener('dragover', handleDragOver);
            uploadZone.addEventListener('drop', handleDrop);
            uploadZone.addEventListener('dragleave', handleDragLeave);

            fileInput.addEventListener('change', handleFileSelect);

            // Button events
            document.getElementById('uploadBtn').addEventListener('click', uploadFiles);

            // Bulk actions
            document.getElementById('bulkDeleteBtn').addEventListener('click', bulkDeleteFiles);
            document.getElementById('selectAllBtn').addEventListener('click', selectAllFiles);
            document.getElementById('clearSelectionBtn').addEventListener('click', clearSelection);

            // Filters
            document.getElementById('fileTypeFilter').addEventListener('change', filterFiles);
            document.getElementById('sortBy').addEventListener('change', filterFiles);

            // File list events (delegated)
            document.getElementById('filesList').addEventListener('click', handleFileListClick);
        }

        // Drag and drop handlers
        function handleDragOver(e) {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('uploadZone').classList.add('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('uploadZone').classList.remove('dragover');

            const files = Array.from(e.dataTransfer.files);
            handleFileSelect({ target: { files } });
        }

        function handleDragLeave(e) {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('uploadZone').classList.remove('dragover');
        }

        // File selection handler
        function handleFileSelect(e) {
            selectedFiles = Array.from(e.target.files);
            updateUploadButton();
            showSelectedFiles();
        }

        function updateUploadButton() {
            const uploadBtn = document.getElementById('uploadBtn');

            if (selectedFiles.length > 0) {
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = `<i class="bi bi-upload"></i> Upload ${selectedFiles.length} File(s)`;
            } else {
                uploadBtn.disabled = true;
                uploadBtn.innerHTML = '<i class="bi bi-upload"></i> Upload Selected Files';
            }
        }

        function showSelectedFiles() {
            if (selectedFiles.length === 0) return;

            const container = document.getElementById('uploadZone');
            container.innerHTML = `
                <i class="bi bi-files text-4xl text-green-600 mb-3"></i>
                <h5 class="text-lg font-medium">${selectedFiles.length} file(s) selected</h5>
                <p class="text-gray-500 mb-3">${selectedFiles.map(f => f.name).join(', ')}</p>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    <i class="bi bi-plus"></i> Add More Files
                </button>
            `;
        }

        // Upload files
        async function uploadFiles() {
            if (selectedFiles.length === 0) return;

            const description = document.getElementById('fileDescription').value;
            const expiresIn = document.getElementById('expiresIn').value;
            showProgress();

            try {
                for (let i = 0; i < selectedFiles.length; i++) {
                    const file = selectedFiles[i];
                    const formData = new FormData();

                    formData.append('file', file);
                    if (description) formData.append('description', description);
                    if (expiresIn) formData.append('expiresIn', expiresIn);

                    const response = await fetch('/api/whatsapp/files/upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`Upload failed: ${response.statusText}`);
                    }

                    const result = await response.json();
                    console.log('File uploaded:', result);

                    // Update progress
                    const percent = Math.round(((i + 1) / selectedFiles.length) * 100);
                    updateProgress(percent);
                }

                showNotification('Files uploaded successfully!', 'success');
                resetUploadForm();
                loadUserFiles();
                loadUserStats();
            } catch (error) {
                console.error('Upload error:', error);
                showNotification('Upload failed: ' + error.message, 'error');
            } finally {
                hideProgress();
            }
        }

        // Progress functions
        function showProgress() {
            document.getElementById('uploadBtn').disabled = true;
            document.querySelector('.progress-container').style.display = 'block';
        }

        function updateProgress(percent) {
            document.getElementById('uploadProgress').style.width = percent + '%';
            document.getElementById('uploadPercent').textContent = percent + '%';
        }

        function hideProgress() {
            document.querySelector('.progress-container').style.display = 'none';
            document.getElementById('uploadBtn').disabled = false;
        }

        function resetUploadForm() {
            selectedFiles = [];
            document.getElementById('fileInput').value = '';
            document.getElementById('fileDescription').value = '';
            document.getElementById('expiresIn').value = '';

            // Reset upload zone
            document.getElementById('uploadZone').innerHTML = `
                <i class="bi bi-cloud-upload text-4xl text-gray-400 mb-3"></i>
                <h5 class="text-lg font-medium">Drag files here or click to browse</h5>
                <p class="text-gray-500 mb-3">Supports images, videos, documents, and audio files</p>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    <i class="bi bi-folder"></i> Choose Files
                </button>
                <input type="file" id="fileInput" class="hidden" multiple 
                       accept="image/*,video/*,.pdf,.doc,.docx,.txt,.mp3,.wav,.ogg">
            `;

            // Re-attach event listener
            document.getElementById('fileInput').addEventListener('change', handleFileSelect);
            updateUploadButton();
        }

        // Load user files
        async function loadUserFiles() {
            try {
                const response = await fetch('/api/whatsapp/files?sortBy=createdAt&sortOrder=DESC&limit=100');

                if (!response.ok) {
                    throw new Error(`Failed to load files: ${response.statusText}`);
                }

                const data = await response.json();
                console.log('API Response:', data); // Debug log
                
                // Handle different response structures
                let files = [];
                if (data.data && Array.isArray(data.data)) {
                    files = data.data;
                } else if (data.files && Array.isArray(data.files)) {
                    files = data.files;
                } else if (Array.isArray(data)) {
                    files = data;
                } else {
                    console.warn('Unexpected API response structure:', data);
                    files = [];
                }
                
                allFiles = files;
                console.log('Processed files:', allFiles); // Debug log

                renderFilesList(allFiles);
            } catch (error) {
                console.error('Error loading files:', error);
                showNotification('Failed to load files: ' + error.message, 'error');
            }
        }

        // Load user stats
        async function loadUserStats() {
            try {
                const response = await fetch('/api/whatsapp/files/stats');

                if (!response.ok) throw new Error('Failed to load stats');

                const data = await response.json();
                console.log('Stats Response:', data); // Debug log
                
                // Handle different response structures
                let stats = {};
                if (data.data) {
                    stats = data.data;
                } else if (data.stats) {
                    stats = data.stats;
                } else {
                    stats = data;
                }

                document.getElementById('totalFiles').textContent = stats.totalFiles || 0;
                document.getElementById('totalSize').textContent = formatFileSize(stats.totalSize || 0);
            } catch (error) {
                console.error('Error loading stats:', error);
                // Set default values on error
                document.getElementById('totalFiles').textContent = '0';
                document.getElementById('totalSize').textContent = '0 B';
            }
        }

        // Render files list
        function renderFilesList(files) {
            const container = document.getElementById('filesList');
            
            // Validate files is an array
            if (!Array.isArray(files)) {
                console.error('Files is not an array:', files);
                files = [];
            }

            if (files.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        <i class="bi bi-files text-4xl mb-3"></i>
                        <p>No files found</p>
                        <small>Upload some files to see them here</small>
                    </div>
                `;
                return;
            }

            const filesHtml = files.map(file => {
                // Validate file object
                if (!file || !file.id) {
                    console.warn('Invalid file object:', file);
                    return '';
                }
                
                return `
                <div class="file-card" data-file-id="${file.id}">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="mr-3">
                                ${getFilePreview(file)}
                            </div>
                            <div>
                                <h6 class="font-semibold">${file.originalName || file.name || 'Unknown File'}</h6>
                                <small class="text-gray-500">
                                    ${getFileTypeIcon(file.fileType || getFileTypeFromName(file.originalName || file.name))} ${(file.fileType || getFileTypeFromName(file.originalName || file.name)).toUpperCase()} • 
                                    ${formatFileSize(file.size || 0)} • 
                                    Used ${file.usageCount || 0} times
                                </small>
                                ${file.description ? `<br><small class="text-blue-600">${file.description}</small>` : ''}
                                <br><small class="text-gray-400">${new Date(file.createdAt || file.created_at || Date.now()).toLocaleDateString()}</small>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="openSendFileModal('${file.id}')" class="bg-green-500 hover:bg-green-700 text-white text-xs px-2 py-1 rounded" title="Send via WhatsApp">
                                <i class="bi bi-whatsapp"></i>
                            </button>
                            <button onclick="previewFile('${file.id}')" class="bg-blue-500 hover:bg-blue-700 text-white text-xs px-2 py-1 rounded" title="Preview">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button onclick="deleteFile('${file.id}')" class="bg-red-500 hover:bg-red-700 text-white text-xs px-2 py-1 rounded" title="Delete">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `}).filter(html => html !== '').join('');

            container.innerHTML = filesHtml;
        }

        // File preview helper
        function getFilePreview(file) {
            const fileName = file.originalName || file.name || '';
            const fileType = file.fileType || getFileTypeFromName(fileName);
            
            if (fileType === 'image' || file.mimetype?.startsWith('image/')) {
                return `<img src="/api/whatsapp/files/${file.id}/preview" class="file-preview" 
                            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        <div class="file-icon" style="display: none;">📷</div>`;
            } else {
                const icon = getFileTypeIcon(fileType);
                return `<div class="file-icon">${icon}</div>`;
            }
        }

        function getFileTypeFromName(fileName) {
            if (!fileName) return 'unknown';
            
            const extension = fileName.split('.').pop()?.toLowerCase();
            const imageExts = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];
            const videoExts = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'];
            const audioExts = ['mp3', 'wav', 'ogg', 'flac', 'aac'];
            const docExts = ['pdf', 'doc', 'docx', 'txt', 'rtf'];
            
            if (imageExts.includes(extension)) return 'image';
            if (videoExts.includes(extension)) return 'video';
            if (audioExts.includes(extension)) return 'audio';
            if (docExts.includes(extension)) return 'document';
            
            return 'unknown';
        }

        function getFileTypeIcon(type) {
            const icons = {
                image: '🖼️',
                video: '🎥',
                document: '📄',
                audio: '🎵',
                unknown: '📁'
            };
            return icons[type] || '📁';
        }

        // File list click handler (delegated events)
        function handleFileListClick(e) {
            const fileId = e.target.closest('[data-file-id]')?.dataset.fileId;

            if (e.target.classList.contains('file-checkbox')) {
                toggleFileSelection(fileId, e.target.checked);
            } else if (e.target.closest('.send-file-btn')) {
                openSendFileModal(fileId);
            } else if (e.target.closest('.preview-file-btn')) {
                previewFile(fileId);
            } else if (e.target.closest('.delete-file-btn')) {
                deleteFile(fileId);
            }
        }

        // Selection functions
        function toggleFileSelection(fileId, selected) {
            if (selected) {
                if (!selectedFileIds.includes(fileId)) {
                    selectedFileIds.push(fileId);
                }
            } else {
                selectedFileIds = selectedFileIds.filter(id => id !== fileId);
            }
            updateBulkActions();
        }

        function selectAllFiles() {
            selectedFileIds = allFiles.map(file => file.id);
            document.querySelectorAll('.file-checkbox').forEach(cb => cb.checked = true);
            updateBulkActions();
        }

        function clearSelection() {
            selectedFileIds = [];
            document.querySelectorAll('.file-checkbox').forEach(cb => cb.checked = false);
            updateBulkActions();
        }

        function updateBulkActions() {
            const bulkCard = document.getElementById('bulkActionsCard');
            const count = selectedFileIds.length;

            if (count > 0) {
                bulkCard.style.display = 'block';
                document.getElementById('selectedCount').textContent = count;
            } else {
                bulkCard.style.display = 'none';
            }
        }

        // File actions
        async function deleteFile(fileId) {
            if (!confirm('Are you sure you want to delete this file?')) return;

            try {
                const response = await fetch(`/api/whatsapp/files/${fileId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) throw new Error('Delete failed');

                showNotification('File deleted successfully', 'success');
                loadUserFiles();
                loadUserStats();
            } catch (error) {
                console.error('Delete error:', error);
                showNotification('Delete failed: ' + error.message, 'error');
            }
        }

        async function bulkDeleteFiles() {
            if (selectedFileIds.length === 0) return;
            if (!confirm(`Delete ${selectedFileIds.length} selected files?`)) return;

            try {
                // Delete files one by one since we don't have bulk delete endpoint
                for (const fileId of selectedFileIds) {
                    await fetch(`/api/whatsapp/files/${fileId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                }

                showNotification(`${selectedFileIds.length} files deleted successfully`, 'success');
                selectedFileIds = [];
                loadUserFiles();
                loadUserStats();
            } catch (error) {
                console.error('Bulk delete error:', error);
                showNotification('Bulk delete failed: ' + error.message, 'error');
            }
        }

        function previewFile(fileId) {
            const file = allFiles.find(f => f.id === fileId);
            if (!file) return;

            const fileName = file.originalName || file.name || '';
            const fileType = file.fileType || getFileTypeFromName(fileName);

            if (fileType === 'image' || file.mimetype?.startsWith('image/')) {
                // For images, open in new tab
                const imageUrl = `/api/whatsapp/files/${fileId}/preview`;
                window.open(imageUrl, '_blank');
            } else if (fileType === 'video') {
                // For videos, show info or try to play
                const videoUrl = `/api/whatsapp/files/${fileId}/preview`;
                window.open(videoUrl, '_blank');
            } else {
                // For other files, show info
                alert(`File: ${fileName}\nType: ${fileType}\nSize: ${formatFileSize(file.size || 0)}\nUploaded: ${new Date(file.createdAt || file.created_at).toLocaleString()}\n\nTo download, use the file URL: /api/whatsapp/files/${fileId}/preview`);
            }
        }

        // Send file functions
        function openSendFileModal(fileId) {
            const file = allFiles.find(f => f.id === fileId);
            if (!file) return;

            currentFileToSend = file;

            // Update modal content
            document.getElementById('sendFileName').textContent = file.originalName || file.name;
            document.getElementById('sendFileInfo').textContent = `${(file.fileType || 'unknown').toUpperCase()} • ${formatFileSize(file.size)}`;

            const previewContainer = document.getElementById('sendFilePreview');
            previewContainer.innerHTML = getFilePreview(file);

            // Show modal
            document.getElementById('sendFileModal').classList.remove('hidden');
        }

        function closeSendModal() {
            document.getElementById('sendFileModal').classList.add('hidden');
            currentFileToSend = null;
        }

        async function sendFile() {
            if (!currentFileToSend) return;

            const phoneNumber = document.getElementById('sendToNumber').value.trim();
            const caption = document.getElementById('sendCaption').value.trim();

            if (!phoneNumber) {
                alert('Please enter a phone number');
                return;
            }

            try {
                const response = await fetch('/api/whatsapp/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        fileId: currentFileToSend.id,
                        recipient: phoneNumber,
                        caption: caption || undefined
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Send failed');
                }

                const result = await response.json();
                showNotification('File sent successfully!', 'success');

                // Close modal
                closeSendModal();

                // Refresh files to update usage count
                loadUserFiles();
            } catch (error) {
                console.error('Send error:', error);
                showNotification('Send failed: ' + error.message, 'error');
            }
        }

        // Filter files
        function filterFiles() {
            loadUserFiles(); // Reload with new filters
        }

        // Utility functions
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        function formatTimeAgo(dateString) {
            const now = new Date();
            const date = new Date(dateString);
            const diff = now - date;

            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);

            if (days > 0) return `${days}d ago`;
            if (hours > 0) return `${hours}h ago`;
            if (minutes > 0) return `${minutes}m ago`;
            return 'Just now';
        }

        function showNotification(message, type = 'info') {
            const alertClass = {
                success: 'bg-green-100 border-green-400 text-green-700',
                error: 'bg-red-100 border-red-400 text-red-700',
                warning: 'bg-yellow-100 border-yellow-400 text-yellow-700',
                info: 'bg-blue-100 border-blue-400 text-blue-700'
            }[type] || 'bg-blue-100 border-blue-400 text-blue-700';

            const notification = document.createElement('div');
            notification.className = `border px-4 py-3 rounded notification ${alertClass}`;
            notification.innerHTML = `
                ${message}
                <button type="button" class="float-right font-bold" onclick="this.parentElement.remove()">&times;</button>
            `;

            document.body.appendChild(notification);

            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);

            // Auto hide after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.classList.remove('show');
                    setTimeout(() => notification.remove(), 300);
                }
            }, 5000);
        }
    </script>
</body>
</html>