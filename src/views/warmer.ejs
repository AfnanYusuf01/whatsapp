<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WhatsApp Warmer Service</title>
  </head>
  <body>
    <div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
      <div class="w-full mb-1">
        <div class="mb-4">
          <nav class="flex mb-5" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 text-sm font-medium md:space-x-2">
              <li class="inline-flex items-center">
                <a href="/dashboard" class="inline-flex items-center text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white">
                  <svg class="w-5 h-5 mr-2.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                  Home
                </a>
              </li>
              <li>
                <div class="flex items-center">
                  <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                  <a href="#" class="ml-1 text-gray-700 hover:text-primary-600 md:ml-2 dark:text-gray-300 dark:hover:text-white">WhatsApp</a>
                </div>
              </li>
              <li>
                <div class="flex items-center">
                  <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                  <span class="ml-1 text-gray-400 md:ml-2 dark:text-gray-500" aria-current="page">Warmer Service</span>
                </div>
              </li>
            </ol>
          </nav>
          <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">WhatsApp Warmer Service</h1>
          <p class="text-gray-500 dark:text-gray-400">Cross-Device Conversation Automation & Testing Interface</p>
        </div>
        <div class="sm:flex">
          <div class="items-center hidden mb-3 sm:flex sm:divide-x sm:divide-gray-100 sm:mb-0 dark:divide-gray-700">
            <div class="flex pl-0 mt-3 space-x-1 sm:pl-2 sm:mt-0">
              <button id="testConnectionBtn" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" title="Test API Connection">
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M17.778 8.222c-4.296-4.296-11.26-4.296-15.556 0A1 1 0 01.808 6.808c5.076-5.077 13.308-5.077 18.384 0a1 1 0 01-1.414 1.414zM14.95 11.05a7 7 0 00-9.9 0 1 1 0 01-1.414-1.414 9 9 0 0112.728 0 1 1 0 01-1.414 1.414zM12.12 13.88a3 3 0 00-4.242 0 1 1 0 01-1.415-1.415 5 5 0 017.072 0 1 1 0 01-1.415 1.415zM9 16a1 1 0 112 0 1 1 0 01-2 0z" clip-rule="evenodd"></path></svg>
              </button>
              <a href="/dashboard" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" title="Back to Dashboard">
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
              </a>
            </div>
          </div>
          <div class="flex items-center ml-auto space-x-2 sm:space-x-3">
            <button type="button" id="refreshAllBtn" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
              <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path></svg>
              Refresh All
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Alert Messages -->
    <div id="alert-container" class="mb-4"></div>
    
    <!-- Tab Navigation - Horizontal -->
    <div class="bg-white shadow rounded-lg mb-6 dark:bg-gray-800">
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <nav class="flex space-x-4 overflow-x-auto">
          <button class="nav-tab whitespace-nowrap flex items-center px-4 py-2 rounded-lg bg-primary-700 text-white font-medium transition-colors dark:bg-primary-600 active" data-tab="campaigns">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"></path><path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 002 2h4a2 2 0 002-2V3a2 2 0 012 2v6h-3a2 2 0 100 4h3v2a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>
            Campaigns
          </button>
          <button class="nav-tab whitespace-nowrap flex items-center px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 font-medium transition-colors" data-tab="templates">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h.28l1.771 5.316A1 1 0 008 18h1a1 1 0 001-1v-4.382l6.553 3.276A1 1 0 0018 15V3z" clip-rule="evenodd"></path></svg>
            Templates
          </button>
          <button class="nav-tab whitespace-nowrap flex items-center px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 font-medium transition-colors" data-tab="analytics">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path></svg>
            Analytics
          </button>
          <button class="nav-tab whitespace-nowrap flex items-center px-4 py-2 rounded-lg text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700 font-medium transition-colors" data-tab="devices">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clip-rule="evenodd"></path></svg>
            Devices
          </button>
        </nav>
      </div>
    </div>

    <!-- Main Content -->
    <div class="bg-white shadow rounded-lg dark:bg-gray-800">
      <div class="content p-6">
          <!-- Campaigns Tab -->
          <div id="campaigns" class="tab-content active">
            <div class="mb-6">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Campaign Management</h2>
              <p class="text-gray-500 dark:text-gray-400">Create and manage your WhatsApp warmer campaigns</p>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <!-- Create Campaign Form -->
              <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                  <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                  Create New Campaign
                </h3>
                
                <div class="space-y-4">
                  <div>
                    <label for="campaignName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Campaign Name</label>
                    <input type="text" id="campaignName" placeholder="My Warmer Campaign" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                  </div>

                  <div>
                    <label for="campaignDescription" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
                    <textarea id="campaignDescription" rows="3" placeholder="Campaign description..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                  </div>

                  <div>
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Selected Devices (click to select)</label>
                    <div id="deviceSelection" class="flex flex-wrap gap-2 p-3 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg min-h-[60px]">
                      <div class="text-center text-gray-500 dark:text-gray-400 w-full py-4">Loading devices...</div>
                    </div>
                  </div>

                  <div>
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Daily Message Settings</label>
                    <div class="grid grid-cols-2 gap-3">
                      <div>
                        <label for="week1" class="block mb-1 text-xs font-medium text-gray-700 dark:text-gray-300">Week 1 (Min-Max)</label>
                        <input type="text" id="week1" value="3-5" placeholder="3-5" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      </div>
                      <div>
                        <label for="week2" class="block mb-1 text-xs font-medium text-gray-700 dark:text-gray-300">Week 2 (Min-Max)</label>
                        <input type="text" id="week2" value="5-8" placeholder="5-8" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      </div>
                      <div>
                        <label for="week3" class="block mb-1 text-xs font-medium text-gray-700 dark:text-gray-300">Week 3 (Min-Max)</label>
                        <input type="text" id="week3" value="8-12" placeholder="8-12" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      </div>
                      <div>
                        <label for="week4" class="block mb-1 text-xs font-medium text-gray-700 dark:text-gray-300">Week 4+ (Min-Max)</label>
                        <input type="text" id="week4" value="10-15" placeholder="10-15" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      </div>
                    </div>
                  </div>

                  <div>
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Working Hours</label>
                    <div class="grid grid-cols-2 gap-3">
                      <div>
                        <label for="startTime" class="block mb-1 text-xs font-medium text-gray-700 dark:text-gray-300">Start Time</label>
                        <input type="time" id="startTime" value="09:00" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      </div>
                      <div>
                        <label for="endTime" class="block mb-1 text-xs font-medium text-gray-700 dark:text-gray-300">End Time</label>
                        <input type="time" id="endTime" value="17:00" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      </div>
                    </div>
                  </div>

                  <button id="createCampaignBtn" class="w-full text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                    Create Campaign
                  </button>
                </div>
              </div>

              <!-- Existing Campaigns -->
              <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                <div class="flex items-center justify-between mb-4">
                  <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"></path><path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 002 2h4a2 2 0 002-2V3a2 2 0 012 2v6h-3a2 2 0 100 4h3v2a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>
                    Existing Campaigns
                  </h3>
                  <button id="refreshCampaignsBtn" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path></svg>
                    Refresh
                  </button>
                </div>
                
                <div id="campaignsList" class="space-y-3 max-h-96 overflow-y-auto">
                  <div class="text-center text-gray-500 dark:text-gray-400 py-8">Loading campaigns...</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Templates Tab -->
          <div id="templates" class="tab-content">
            <div class="mb-6">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Conversation Templates</h2>
              <p class="text-gray-500 dark:text-gray-400">Create and manage conversation templates for your campaigns</p>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <!-- Create Template Form -->
              <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                  <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                  Create Template
                </h3>
                
                <div class="space-y-4">
                  <div>
                    <label for="campaignSelect" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Campaign</label>
                    <select id="campaignSelect" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      <option value="">Select a campaign...</option>
                    </select>
                  </div>

                  <div>
                    <label for="templateName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Template Name</label>
                    <input type="text" id="templateName" placeholder="Morning Greeting" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                  </div>

                  <div>
                    <label for="templateCategory" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Category</label>
                    <select id="templateCategory" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                      <option value="greeting">Greeting</option>
                      <option value="casual_chat">Casual Chat</option>
                      <option value="business_talk">Business Talk</option>
                      <option value="follow_up">Follow Up</option>
                      <option value="question_answer">Q&A</option>
                      <option value="sharing_update">Sharing Update</option>
                      <option value="planning">Planning</option>
                      <option value="random">Random</option>
                    </select>
                  </div>

                  <div>
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Conversation Flow</label>
                    <div id="conversationSteps" class="space-y-3">
                      <div class="conversation-step bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg p-4">
                        <h4 class="text-sm font-medium text-primary-600 dark:text-primary-400 mb-2">Step 1</h4>
                        <textarea placeholder="Enter message content..." rows="2" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                      </div>
                    </div>
                    <button id="addStepBtn" class="mt-3 inline-flex items-center px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                      <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                      Add Step
                    </button>
                  </div>

                  <button id="createTemplateBtn" class="w-full text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                    Create Template
                  </button>
                </div>
              </div>

              <!-- Template Library -->
              <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                  <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"></path></svg>
                  Template Library
                </h3>
                
                <div id="templatesList" class="space-y-3 max-h-96 overflow-y-auto">
                  <div class="text-center text-gray-500 dark:text-gray-400 py-8">Select a campaign to view templates</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Analytics Tab -->
          <div id="analytics" class="tab-content">
            <div class="mb-6">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Campaign Analytics</h2>
              <p class="text-gray-500 dark:text-gray-400">View detailed analytics and performance metrics for your campaigns</p>
            </div>

            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 mb-6">
              <div>
                <label for="analyticsSelect" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Campaign</label>
                <select id="analyticsSelect" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                  <option value="">Select a campaign...</option>
                </select>
              </div>
            </div>

            <div id="analyticsData">
              <div class="text-center text-gray-500 dark:text-gray-400 py-8">
                <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path></svg>
                Select a campaign to view analytics
              </div>
            </div>
          </div>

          <!-- Devices Tab -->
          <div id="devices" class="tab-content">
            <div class="mb-6">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Available Devices</h2>
              <p class="text-gray-500 dark:text-gray-400">View and manage WhatsApp devices connected to your account</p>
            </div>

            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                  <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clip-rule="evenodd"></path></svg>
                  Device List
                </h3>
                <button id="refreshDevicesBtn" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                  <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path></svg>
                  Refresh Devices
                </button>
              </div>
              
              <div id="devicesList" class="space-y-3 max-h-96 overflow-y-auto">
                <div class="text-center text-gray-500 dark:text-gray-400 py-8">
                  <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clip-rule="evenodd"></path></svg>
                  Loading devices...
                </div>
              </div>
            </div>
          </div>

          <!-- Response Display -->
          <div id="response" class="mt-6 p-4 border rounded-lg font-mono text-sm whitespace-pre-wrap max-h-72 overflow-y-auto hidden"></div>
        </div>
      </div>
    </div>

    <style>
        .bg-primary-50 { background-color: #eff6ff; }
        .bg-primary-100 { background-color: #dbeafe; }
        .bg-primary-500 { background-color: #3b82f6; }
        .bg-primary-600 { background-color: #2563eb; }
        .bg-primary-700 { background-color: #1d4ed8; }
        .bg-primary-800 { background-color: #1e40af; }
        .text-primary-600 { color: #2563eb; }
        .text-primary-700 { color: #1d4ed8; }
        .border-primary-300 { border-color: #93c5fd; }
        .border-primary-500 { border-color: #3b82f6; }
        .focus\:ring-primary-300:focus { box-shadow: 0 0 0 3px rgba(147, 197, 253, 0.5); }
        .focus\:ring-primary-500:focus { box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5); }
        .focus\:ring-primary-800:focus { box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.5); }
        .focus\:border-primary-500:focus { border-color: #3b82f6; }
        .hover\:bg-primary-800:hover { background-color: #1e40af; }
        .hover\:bg-primary-700:hover { background-color: #1d4ed8; }
        .dark .dark\:bg-primary-600 { background-color: #2563eb; }
        .dark .dark\:hover\:bg-primary-700:hover { background-color: #1d4ed8; }
        .dark .dark\:focus\:ring-primary-800:focus { box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.5); }
        .dark .dark\:focus\:ring-primary-600:focus { box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.5); }
        
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        
        .device-item {
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.3s ease;
            background-color: #e5e7eb;
            color: #374151;
        }
        .device-item:hover {
            background-color: #25d366;
            color: white;
        }
        .device-item.selected {
            background-color: #25d366;
            color: white;
        }
        .dark .device-item {
            background-color: #4b5563;
            color: #e5e7eb;
        }
        .dark .device-item:hover,
        .dark .device-item.selected {
            background-color: #25d366;
            color: white;
        }
        
        .status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        .status.active {
            background: #d1fae5;
            color: #065f46;
        }
        .status.paused {
            background: #fef3c7;
            color: #92400e;
        }
        .status.stopped {
            background: #fee2e2;
            color: #991b1b;
        }
        .dark .status.active {
            background: #064e3b;
            color: #6ee7b7;
        }
        .dark .status.paused {
            background: #78350f;
            color: #fbbf24;
        }
        .dark .status.stopped {
            background: #7f1d1d;
            color: #fca5a5;
        }
        
        .response.success {
            background: #d1fae5;
            border-color: #a7f3d0;
            color: #065f46;
        }
        .response.error {
            background: #fee2e2;
            border-color: #fecaca;
            color: #991b1b;
        }
        .dark .response.success {
            background: #064e3b;
            border-color: #047857;
            color: #6ee7b7;
        }
        .dark .response.error {
            background: #7f1d1d;
            border-color: #dc2626;
            color: #fca5a5;
        }
        
        .conversation-step {
            background: white;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
        }
        .conversation-step h4 {
            color: #25d366;
            margin-bottom: 10px;
        }
        .dark .conversation-step {
            background: #374151;
            border-color: #4b5563;
        }
        .dark .conversation-step h4 {
            color: #6ee7b7;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #25d366;
        }
        .stat-label {
            color: #6b7280;
            font-size: 0.875rem;
            margin-top: 5px;
        }
        .dark .stat-card {
            background: #374151;
        }
        .dark .stat-label {
            color: #9ca3af;
        }
    </style>

    <script>
      // Updated API_BASE to use our new API endpoints
      const API_BASE = "/api/warmer";
      let selectedDevices = [];
      let conversationStepCount = 1;

      // Tab Management
      function showTab(tabName, targetElement) {
        // Hide all tab contents
        document.querySelectorAll(".tab-content").forEach((content) => {
          content.classList.remove("active");
        });

        // Remove active styling from all nav tabs
        document.querySelectorAll(".nav-tab").forEach((tab) => {
          tab.classList.remove("bg-primary-700", "text-white", "dark:bg-primary-600", "active");
          tab.classList.add("text-gray-700", "hover:bg-gray-100", "dark:text-gray-300", "dark:hover:bg-gray-700");
        });

        // Show selected tab content
        document.getElementById(tabName).classList.add("active");

        // Add active styling to clicked tab
        targetElement.classList.remove("text-gray-700", "hover:bg-gray-100", "dark:text-gray-300", "dark:hover:bg-gray-700");
        targetElement.classList.add("bg-primary-700", "text-white", "dark:bg-primary-600", "active");

        // Load data for specific tabs
        if (tabName === "campaigns") {
          loadCampaigns();
          loadDevices();
        } else if (tabName === "templates") {
          loadCampaignsForSelect();
        } else if (tabName === "analytics") {
          loadCampaignsForAnalytics();
        } else if (tabName === "devices") {
          loadDevices();
        }
      }

      // Device Management
      async function loadDevices() {
        try {
          // No longer need to get userId manually - it's from authentication
          const response = await fetch(`${API_BASE}/devices`);
          const data = await response.json();

          // Debug logging
          console.log('=== DEVICE LOADING DEBUG ===');
          console.log('Response status:', response.status);
          console.log('Full response data:', data);
          console.log('Data.success:', data.success);
          console.log('Data.data:', data.data);
          console.log('Data.data type:', typeof data.data);
          console.log('Data.data length:', data.data ? data.data.length : 'undefined');

          if (data.success) {
            displayDevices(data.data);
          } else {
            showResponse(`Error loading devices: ${data.error}`, "error");
          }
        } catch (error) {
          console.error('Error in loadDevices:', error);
          showResponse(`Error loading devices: ${error.message}`, "error");
        }
      }

      function displayDevices(devices) {
        console.log('=== DISPLAY DEVICES DEBUG ===');
        console.log('Devices parameter:', devices);
        console.log('Devices type:', typeof devices);
        console.log('Devices is array:', Array.isArray(devices));
        
        const deviceSelection = document.getElementById("deviceSelection");
        const devicesList = document.getElementById("devicesList");

        if (!devices || !Array.isArray(devices)) {
          console.error('Devices is not an array:', devices);
          deviceSelection.innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 w-full py-4">Invalid device data format</div>';
          if (devicesList) devicesList.innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 py-8">Invalid device data format</div>';
          return;
        }

        if (devices.length === 0) {
          console.log('No devices found in array');
          deviceSelection.innerHTML =
            '<div class="text-center text-gray-500 dark:text-gray-400 w-full py-4">No devices found</div>';
          if (devicesList) devicesList.innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 py-8">No devices found</div>';
          return;
        }

        console.log('Processing', devices.length, 'devices');
        console.log('First device structure:', devices[0]);

        // For device selection - handle different field names
        deviceSelection.innerHTML = devices
          .map(
            (device) => {
              // Handle different possible field names from API
              const sessionId = device.sessionId || device.id || device.session_id || device.deviceId || 'unknown';
              const alias = device.alias || device.name || device.device_name || sessionId;
              const status = device.status || device.state || 'unknown';
              
              console.log('Device mapping:', { sessionId, alias, status, original: device });
              
              return `
                <div class="device-item ${
                  selectedDevices.includes(sessionId) ? "selected" : ""
                }" 
                     data-device-id="${sessionId}">
                    ${alias} 
                    <span class="status ${status}">${status}</span>
                </div>
              `;
            }
          )
          .join("");

        // Add event listeners to device items
        deviceSelection.querySelectorAll(".device-item").forEach((item) => {
          item.addEventListener("click", function () {
            toggleDevice(this.dataset.deviceId);
          });
        });

        // For devices list - handle different field names
        devicesList.innerHTML = devices
          .map(
            (device) => {
              const sessionId = device.sessionId || device.id || device.session_id || device.deviceId || 'unknown';
              const alias = device.alias || device.name || device.device_name || sessionId;
              const status = device.status || device.state || 'unknown';
              const phoneNumber = device.phoneNumber || device.phone_number || device.phone || "Not set";
              const lastConnection = device.lastConnection || device.last_connection || device.lastSeen || null;
              
              return `
                <div class="card">
                    <h4>${alias}</h4>
                    <p><strong>Status:</strong> <span class="status ${status}">${status}</span></p>
                    <p><strong>Phone:</strong> ${phoneNumber}</p>
                    <p><strong>Last Connection:</strong> ${
                      lastConnection
                        ? new Date(lastConnection).toLocaleString()
                        : "Never"
                    }</p>
                    <p><strong>Session ID:</strong> ${sessionId}</p>
                </div>
              `;
            }
          )
          .join("");
      }

      function toggleDevice(sessionId) {
        if (selectedDevices.includes(sessionId)) {
          selectedDevices = selectedDevices.filter((id) => id !== sessionId);
        } else {
          selectedDevices.push(sessionId);
        }

        // Update display
        document.querySelectorAll(".device-item").forEach((item) => {
          const deviceId = item.dataset.deviceId;
          if (deviceId === sessionId) {
            item.classList.toggle("selected");
          }
        });
      }

      // Campaign Management
      async function createCampaign() {
        try {
          if (selectedDevices.length < 3) {
            showResponse("Please select at least 3 devices", "error");
            return;
          }

          const campaignData = {
            name: document.getElementById("campaignName").value,
            description: document.getElementById("campaignDescription").value,
            selectedDevices: selectedDevices,
            dailyMessageSettings: {
              day1_7: parseRange(document.getElementById("week1").value),
              day8_14: parseRange(document.getElementById("week2").value),
              day15_21: parseRange(document.getElementById("week3").value),
              day22_plus: parseRange(document.getElementById("week4").value),
            },
            timingSettings: {
              workingHours: {
                start: document.getElementById("startTime").value,
                end: document.getElementById("endTime").value,
              },
              timezone: "<%= process.env.TIMEZONE || 'Asia/Jakarta' %>",
              intervalMinutes: { min: 30, max: 180 },
              pauseDays: [0, 6], // Weekend pause
            },
          };

          console.log('=== CREATE CAMPAIGN FRONTEND DEBUG ===');
          console.log('Campaign data to be sent:', campaignData);
          console.log('Selected devices:', selectedDevices);
          console.log('Request URL:', `${API_BASE}/campaigns`);

          const response = await fetch(`${API_BASE}/campaigns`, {
            method: "POST",
            headers: { 
              "Content-Type": "application/json",
              "Accept": "*/*",
              "Accept-Language": "en-GB,en;q=0.9,ar;q=0.8,id;q=0.7,en-US;q=0.6,ms;q=0.5",
              "DNT": "1"
            },
            body: JSON.stringify(campaignData),
          });

          const data = await response.json();
          showResponse(
            JSON.stringify(data, null, 2),
            data.success ? "success" : "error"
          );

          if (data.success) {
            loadCampaigns();
            // Clear form
            document.getElementById("campaignName").value = "";
            document.getElementById("campaignDescription").value = "";
            selectedDevices = [];
            loadDevices();
          }
        } catch (error) {
          showResponse(`Error creating campaign: ${error.message}`, "error");
        }
      }

      function parseRange(rangeStr) {
        const [min, max] = rangeStr.split("-").map((n) => parseInt(n.trim()));
        return { min, max };
      }

      async function loadCampaigns() {
        try {
          const response = await fetch(`${API_BASE}/campaigns`);
          const data = await response.json();

          // Debug logging
          console.log('=== CAMPAIGN LOADING DEBUG ===');
          console.log('Response status:', response.status);
          console.log('Full response data:', data);
          console.log('Data.success:', data.success);
          console.log('Data.data:', data.data);
          console.log('Data.data type:', typeof data.data);
          console.log('Data.data is array:', Array.isArray(data.data));
          console.log('Data.data length:', data.data ? data.data.length : 'undefined');

          if (data.success) {
            displayCampaigns(data.data);
          } else {
            showResponse(`Error loading campaigns: ${data.error}`, "error");
          }
        } catch (error) {
          console.error('Error in loadCampaigns:', error);
          showResponse(`Error loading campaigns: ${error.message}`, "error");
        }
      }

      function displayCampaigns(campaigns) {
        console.log('=== DISPLAY CAMPAIGNS DEBUG ===');
        console.log('Campaigns parameter:', campaigns);
        console.log('Campaigns type:', typeof campaigns);
        console.log('Campaigns is array:', Array.isArray(campaigns));
        
        const campaignsList = document.getElementById("campaignsList");

        if (!campaigns || !Array.isArray(campaigns)) {
          console.error('Campaigns is not an array:', campaigns);
          campaignsList.innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 py-8">Invalid campaign data format</div>';
          return;
        }

        if (campaigns.length === 0) {
          console.log('No campaigns found in array');
          campaignsList.innerHTML =
            '<div class="text-center text-gray-500 dark:text-gray-400 py-8">No campaigns found</div>';
          return;
        }

        console.log('Processing', campaigns.length, 'campaigns');
        console.log('First campaign structure:', campaigns[0]);

        campaignsList.innerHTML = campaigns
          .map(
            (campaign, index) => {
              // Debug log each campaign
              console.log(`Campaign ${index}:`, campaign);
              
              // Handle different possible field names from API
              const id = campaign.id || campaign.campaignId || campaign._id || 'unknown';
              const name = campaign.name || campaign.campaignName || campaign.title || 'Unnamed Campaign';
              const description = campaign.description || campaign.desc || "No description";
              const status = campaign.status || campaign.state || 'unknown';
              const selectedDevices = campaign.selectedDevices || campaign.devices || [];
              const totalMessagesSent = campaign.totalMessagesSent || campaign.messagesSent || campaign.messages_sent || 0;
              const totalConversations = campaign.totalConversations || campaign.conversations || campaign.conversation_count || 0;
              
              console.log(`Campaign ${index} mapped:`, { id, name, description, status, selectedDevices, totalMessagesSent, totalConversations });
              
              return `
                <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg p-4 shadow-sm">
                    <div class="flex justify-between items-start mb-3">
                        <h4 class="text-lg font-medium text-gray-900 dark:text-white">${name}</h4>
                        <span class="status ${status}">${status.toUpperCase()}</span>
                    </div>
                    <p class="text-gray-600 dark:text-gray-300 text-sm mb-3">${description}</p>
                    
                    <div class="grid grid-cols-3 gap-3 mb-3 text-center">
                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-2">
                            <div class="text-lg font-bold text-gray-900 dark:text-white">${selectedDevices.length || 0}</div>
                            <div class="text-xs text-gray-500 dark:text-gray-400">Devices</div>
                        </div>
                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-2">
                            <div class="text-lg font-bold text-gray-900 dark:text-white">${totalMessagesSent}</div>
                            <div class="text-xs text-gray-500 dark:text-gray-400">Messages</div>
                        </div>
                        <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-2">
                            <div class="text-lg font-bold text-gray-900 dark:text-white">${totalConversations}</div>
                            <div class="text-xs text-gray-500 dark:text-gray-400">Conversations</div>
                        </div>
                    </div>
                    
                    <div class="flex flex-wrap gap-2">
                        ${
                          status === "active"
                            ? `<button class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700" data-action="pause" data-campaign-id="${id}">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>
                                Pause
                              </button>`
                            : status === "paused"
                            ? `<button class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-300 rounded-lg dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800" data-action="resume" data-campaign-id="${id}">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path></svg>
                                Resume
                              </button>`
                            : ""
                        }
                        <button class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 rounded-lg dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800" data-action="stop" data-campaign-id="${id}">
                            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd"></path></svg>
                            Stop
                        </button>
                        <button class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 rounded-lg dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800" data-action="stats" data-campaign-id="${id}">
                            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20"><path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path></svg>
                            Stats
                        </button>
                    </div>
                </div>
            `;
            }
          )
          .join("");

        // Add event delegation for campaign buttons
        campaignsList.addEventListener("click", function (e) {
          if (e.target.dataset.action) {
            const campaignId = e.target.dataset.campaignId;
            const action = e.target.dataset.action;

            if (action === "pause") {
              pauseCampaign(campaignId);
            } else if (action === "resume") {
              resumeCampaign(campaignId);
            } else if (action === "stop") {
              stopCampaign(campaignId);
            } else if (action === "stats") {
              viewCampaignStats(campaignId);
            }
          }
        });
      }

      async function pauseCampaign(campaignId) {
        try {
          const response = await fetch(`${API_BASE}/campaigns/${campaignId}/pause`, {
            method: "POST",
          });
          const data = await response.json();
          showResponse(
            JSON.stringify(data, null, 2),
            data.success ? "success" : "error"
          );
          if (data.success) loadCampaigns();
        } catch (error) {
          showResponse(`Error pausing campaign: ${error.message}`, "error");
        }
      }

      async function resumeCampaign(campaignId) {
        try {
          const response = await fetch(`${API_BASE}/campaigns/${campaignId}/resume`, {
            method: "POST",
          });
          const data = await response.json();
          showResponse(
            JSON.stringify(data, null, 2),
            data.success ? "success" : "error"
          );
          if (data.success) loadCampaigns();
        } catch (error) {
          showResponse(`Error resuming campaign: ${error.message}`, "error");
        }
      }

      async function stopCampaign(campaignId) {
        if (!confirm("Are you sure you want to stop this campaign?")) return;

        try {
          const response = await fetch(`${API_BASE}/campaigns/${campaignId}/stop`, {
            method: "POST",
          });
          const data = await response.json();
          showResponse(
            JSON.stringify(data, null, 2),
            data.success ? "success" : "error"
          );
          if (data.success) loadCampaigns();
        } catch (error) {
          showResponse(`Error stopping campaign: ${error.message}`, "error");
        }
      }

      // Template Management
      async function loadCampaignsForSelect() {
        try {
          const response = await fetch(`${API_BASE}/campaigns`);
          const data = await response.json();

          console.log('=== CAMPAIGNS FOR SELECT DEBUG ===');
          console.log('Response data:', data);
          console.log('Data.data:', data.data);

          if (data.success) {
            const campaignSelect = document.getElementById("campaignSelect");
            const campaigns = data.data || [];
            campaignSelect.innerHTML =
              '<option value="">Select a campaign...</option>' +
              campaigns
                .map(
                  (campaign) => {
                    const id = campaign.id || campaign.campaignId || campaign._id || 'unknown';
                    const name = campaign.name || campaign.campaignName || campaign.title || 'Unnamed Campaign';
                    return `<option value="${id}">${name}</option>`;
                  }
                )
                .join("");
          }
        } catch (error) {
          console.error("Error loading campaigns for select:", error);
        }
      }

      function addConversationStep() {
        conversationStepCount++;
        const stepsContainer = document.getElementById("conversationSteps");
        const newStep = document.createElement("div");
        newStep.className = "conversation-step";
        newStep.innerHTML = `
                <h4>Step ${conversationStepCount}</h4>
                <textarea placeholder="Enter message content..." rows="2"></textarea>
                <button class="btn danger remove-step-btn" style="margin-top: 10px;">Remove</button>
            `;
        stepsContainer.appendChild(newStep);

        // Add event listener to the new remove button
        newStep
          .querySelector(".remove-step-btn")
          .addEventListener("click", function () {
            newStep.remove();
          });
      }

      function removeConversationStep(button) {
        button.parentElement.remove();
      }

      async function createTemplate() {
        try {
          const campaignId = document.getElementById("campaignSelect").value;

          if (!campaignId) {
            showResponse("Please select a campaign", "error");
            return;
          }

          const steps = document.querySelectorAll(
            "#conversationSteps .conversation-step textarea"
          );
          const conversationFlow = Array.from(steps).map((textarea, index) => ({
            message: textarea.value,
            senderType: "random",
            receiverType: "random",
          }));

          const templateData = {
            name: document.getElementById("templateName").value,
            category: document.getElementById("templateCategory").value,
            conversationFlow: conversationFlow,
            variables: {
              name: "User",
              company: "Company",
            },
            settings: {
              minDevicesRequired: 2,
              maxDevicesInConversation: 4,
              messageDelaySeconds: { min: 10, max: 60 },
              canBeRepeated: true,
              weight: 1,
            },
          };

          const response = await fetch(`${API_BASE}/campaigns/${campaignId}/templates`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(templateData),
          });

          const data = await response.json();
          showResponse(
            JSON.stringify(data, null, 2),
            data.success ? "success" : "error"
          );

          if (data.success) {
            // Clear form
            document.getElementById("templateName").value = "";
            document.getElementById("conversationSteps").innerHTML = `
                        <div class="conversation-step">
                            <h4>Step 1</h4>
                            <textarea placeholder="Enter message content..." rows="2"></textarea>
                        </div>
                    `;
            conversationStepCount = 1;
          }
        } catch (error) {
          showResponse(`Error creating template: ${error.message}`, "error");
        }
      }

      // Analytics
      async function loadCampaignsForAnalytics() {
        try {
          const response = await fetch(`${API_BASE}/campaigns`);
          const data = await response.json();

          console.log('=== CAMPAIGNS FOR ANALYTICS DEBUG ===');
          console.log('Response data:', data);
          console.log('Data.data:', data.data);

          if (data.success) {
            const analyticsSelect = document.getElementById("analyticsSelect");
            const campaigns = data.data || [];
            analyticsSelect.innerHTML =
              '<option value="">Select a campaign...</option>' +
              campaigns
                .map(
                  (campaign) => {
                    const id = campaign.id || campaign.campaignId || campaign._id || 'unknown';
                    const name = campaign.name || campaign.campaignName || campaign.title || 'Unnamed Campaign';
                    return `<option value="${id}">${name}</option>`;
                  }
                )
                .join("");

            analyticsSelect.onchange = function () {
              if (this.value) {
                loadCampaignAnalytics(this.value);
              }
            };
          }
        } catch (error) {
          console.error("Error loading campaigns for analytics:", error);
        }
      }

      async function loadCampaignAnalytics(campaignId) {
        try {
          const response = await fetch(`${API_BASE}/campaigns/${campaignId}/stats`);
          const data = await response.json();

          if (data.success) {
            displayAnalytics(data.data);
          } else {
            showResponse(`Error loading analytics: ${data.error}`, "error");
          }
        } catch (error) {
          showResponse(`Error loading analytics: ${error.message}`, "error");
        }
      }

      function displayAnalytics(stats) {
        const analyticsData = document.getElementById("analyticsData");

        analyticsData.innerHTML = `
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">${stats.todayMessages}</div>
                        <div class="stat-label">Today's Messages</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.totalLogs}</div>
                        <div class="stat-label">Total Messages</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.connectedDevices}</div>
                        <div class="stat-label">Connected Devices</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${
                          stats.campaign.totalConversations
                        }</div>
                        <div class="stat-label">Total Conversations</div>
                    </div>
                </div>
                
                <div class="card">
                    <h3>Campaign Details</h3>
                    <p><strong>Name:</strong> ${stats.campaign.name}</p>
                    <p><strong>Status:</strong> <span class="status ${
                      stats.campaign.status
                    }">${stats.campaign.status}</span></p>
                    <p><strong>Started:</strong> ${new Date(
                      stats.campaign.startedAt
                    ).toLocaleString()}</p>
                    <p><strong>Last Activity:</strong> ${
                      stats.campaign.lastActivityAt
                        ? new Date(
                            stats.campaign.lastActivityAt
                          ).toLocaleString()
                        : "Never"
                    }</p>
                    <p><strong>Selected Devices:</strong> ${
                      stats.campaign.selectedDevices.length
                    }</p>
                </div>
            `;
      }

      async function viewCampaignStats(campaignId) {
        const analyticsTab = document.querySelector('[data-tab="analytics"]');
        showTab("analytics", analyticsTab);
        document.getElementById("analyticsSelect").value = campaignId;
        await loadCampaignAnalytics(campaignId);
      }

      // Test API Connection (similar to messages.ejs)
      async function testAPIConnection() {
        const testBtn = document.getElementById('testConnectionBtn');
        if (!testBtn) return;

        const originalHTML = testBtn.innerHTML;
        
        try {
          testBtn.disabled = true;
          testBtn.innerHTML = '<div class="animate-spin inline-block w-4 h-4 border-2 border-current border-t-transparent rounded-full"></div>';

          const response = await fetch('/api/warmer/test', {
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            }
          });

          const data = await response.json();

          if (response.ok && data.success) {
            showAlert('✅ Warmer API Connection successful!', 'success');
          } else {
            showAlert(`❌ API Connection failed: ${data.message || 'Unknown error'}`, 'error');
          }

        } catch (error) {
          showAlert(`❌ Failed to test API connection: ${error.message}`, 'error');
        } finally {
          testBtn.disabled = false;
          testBtn.innerHTML = originalHTML;
        }
      }

      // Refresh All Data
      function refreshAllData() {
        const activeTab = document.querySelector('.tab-content.active');
        if (activeTab) {
          const tabId = activeTab.id;
          if (tabId === "campaigns") {
            loadCampaigns();
            loadDevices();
          } else if (tabId === "templates") {
            loadCampaignsForSelect();
          } else if (tabId === "analytics") {
            loadCampaignsForAnalytics();
          } else if (tabId === "devices") {
            loadDevices();
          }
        }
        showAlert('Data refreshed successfully', 'success');
      }

      // Alert function (similar to messages.ejs)
      function showAlert(message, type = 'info') {
        const alertContainer = document.getElementById('alert-container');
        if (!alertContainer) return;

        const alertTypes = {
          success: 'bg-green-100 border-green-500 text-green-700 dark:bg-green-900 dark:border-green-600 dark:text-green-300',
          error: 'bg-red-100 border-red-500 text-red-700 dark:bg-red-900 dark:border-red-600 dark:text-red-300',
          warning: 'bg-yellow-100 border-yellow-500 text-yellow-700 dark:bg-yellow-900 dark:border-yellow-600 dark:text-yellow-300',
          info: 'bg-blue-100 border-blue-500 text-blue-700 dark:bg-blue-900 dark:border-blue-600 dark:text-blue-300'
        };

        const iconTypes = {
          success: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>',
          error: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
          warning: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
          info: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>'
        };

        const alertId = 'alert-' + Date.now();
        const alertElement = document.createElement('div');
        alertElement.id = alertId;
        alertElement.className = `flex items-center p-4 mb-4 border rounded-lg ${alertTypes[type] || alertTypes.info}`;
        alertElement.innerHTML = `
          <div class="flex-shrink-0">
            ${iconTypes[type] || iconTypes.info}
          </div>
          <div class="ml-3 text-sm font-medium">
            ${message}
          </div>
          <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:hover:bg-gray-700" onclick="document.getElementById('${alertId}').remove()">
            <span class="sr-only">Close</span>
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
          </button>
        `;

        alertContainer.appendChild(alertElement);

        // Auto-remove after 5 seconds
        setTimeout(() => {
          if (document.getElementById(alertId)) {
            document.getElementById(alertId).remove();
          }
        }, 5000);
      }

      // Utility Functions
      function showResponse(message, type) {
        const responseDiv = document.getElementById("response");
        responseDiv.textContent = message;
        responseDiv.className = `mt-6 p-4 border rounded-lg font-mono text-sm whitespace-pre-wrap max-h-72 overflow-y-auto response ${type}`;
        responseDiv.classList.remove("hidden");

        // Auto-hide after 10 seconds for success messages
        if (type === "success") {
          setTimeout(() => {
            responseDiv.classList.add("hidden");
          }, 10000);
        }
      }



      // Initialize
      document.addEventListener("DOMContentLoaded", function () {
        // Tab event listeners
        document.querySelectorAll(".nav-tab").forEach((tab) => {
          tab.addEventListener("click", function () {
            showTab(this.dataset.tab, this);
          });
        });

        // Button event listeners
        document
          .getElementById("createCampaignBtn")
          .addEventListener("click", createCampaign);
        document
          .getElementById("refreshCampaignsBtn")
          .addEventListener("click", loadCampaigns);
        document
          .getElementById("createTemplateBtn")
          .addEventListener("click", createTemplate);
        document
          .getElementById("addStepBtn")
          .addEventListener("click", addConversationStep);
        document
          .getElementById("refreshDevicesBtn")
          .addEventListener("click", loadDevices);

        // Header button event listeners
        const testConnectionBtn = document.getElementById("testConnectionBtn");
        if (testConnectionBtn) {
          testConnectionBtn.addEventListener("click", testAPIConnection);
        }
        
        const refreshAllBtn = document.getElementById("refreshAllBtn");
        if (refreshAllBtn) {
          refreshAllBtn.addEventListener("click", refreshAllData);
        }

        // Initial load
        loadDevices();
        loadCampaigns();
      });
    </script>
  </body>
</html> 