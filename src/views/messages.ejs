<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
    <div class="w-full mb-1">
        <div class="mb-4">
            <nav class="flex mb-5" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 text-sm font-medium md:space-x-2">
                  <li class="inline-flex items-center">
                    <a href="/dashboard" class="inline-flex items-center text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white">
                      <svg class="w-5 h-5 mr-2.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                      Home
                    </a>
                  </li>
                  <li>
                    <div class="flex items-center">
                      <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                      <a href="#" class="ml-1 text-gray-700 hover:text-primary-600 md:ml-2 dark:text-gray-300 dark:hover:text-white">WhatsApp</a>
                    </div>
                  </li>
                  <li>
                    <div class="flex items-center">
                      <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                      <span class="ml-1 text-gray-400 md:ml-2 dark:text-gray-500" aria-current="page">Messages</span>
                    </div>
                  </li>
                </ol>
            </nav>
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Send Messages</h1>
        </div>
        <div class="sm:flex">
            <div class="items-center hidden mb-3 sm:flex sm:divide-x sm:divide-gray-100 sm:mb-0 dark:divide-gray-700">
                <div class="flex pl-0 mt-3 space-x-1 sm:pl-2 sm:mt-0">
                    <button id="testConnectionBtn" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" title="Test API Connection">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M17.778 8.222c-4.296-4.296-11.26-4.296-15.556 0A1 1 0 01.808 6.808c5.076-5.077 13.308-5.077 18.384 0a1 1 0 01-1.414 1.414zM14.95 11.05a7 7 0 00-9.9 0 1 1 0 01-1.414-1.414 9 9 0 0112.728 0 1 1 0 01-1.414 1.414zM12.12 13.88a3 3 0 00-4.242 0 1 1 0 01-1.415-1.415 5 5 0 017.072 0 1 1 0 01-1.415 1.415zM9 16a1 1 0 112 0 1 1 0 01-2 0z" clip-rule="evenodd"></path></svg>
                    </button>
                    <a href="/dashboard" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" title="Back to Dashboard">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                    </a>
                </div>
            </div>
            <div class="flex items-center ml-auto space-x-2 sm:space-x-3">
                <button type="button" id="refreshHistoryBtn" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                    <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path></svg>
                    Refresh
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Alert Messages -->
<div id="alert-container" class="mb-4"></div>

<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Send Messages Form -->
    <div class="lg:col-span-2">
        <div class="bg-white shadow rounded-lg dark:bg-gray-800">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path></svg>
                    Send Message
                </h3>
            </div>
            <div class="p-6">
                <form id="sendMessageForm" class="space-y-6">
                    <!-- Session Selector -->
                    <div>
                        <label for="sessionSelect" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Device Session</label>
                        <select id="sessionSelect" name="sessionId" required class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                            <option value="">Choose a session...</option>
                        </select>
                        <!-- Session Status Indicator -->
                        <div id="sessionStatusIndicator" class="mt-2 p-3 bg-gray-50 border border-gray-200 rounded-lg dark:bg-gray-700 dark:border-gray-600" style="display: none">
                            <div id="sessionStatusBadge" class="flex items-center">
                                <span id="sessionStatusIcon" class="mr-2 text-lg"></span>
                                <span id="sessionStatusText" class="text-sm"></span>
                            </div>
                        </div>
                    </div>

                    <div>
                        <label for="recipient" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Recipient Phone Number</label>
                        <input type="text" id="recipient" name="recipient" required class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="628123456789">
                        <p class="text-xs text-gray-500 mt-1">Format: Country code without + (e.g., 628123456789)</p>
                    </div>

                    <div>
                        <label for="messageType" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Message Type</label>
                        <select id="messageType" name="messageType" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                            <option value="text">Text Message</option>
                            <option value="image">Image Message</option>
                            <option value="video">Video Message</option>
                            <option value="document">Document Message</option>
                        </select>
                    </div>

                    <!-- Text Message Input -->
                    <div id="textMessageInput">
                        <label for="message" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Message</label>
                        <textarea id="message" name="message" rows="3" required class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Enter your message..."></textarea>
                    </div>

                    <!-- Image Message Input -->
                    <div id="imageMessageInput" style="display: none;">
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Image from Library</label>
                        <button type="button" id="chooseImageBtn" class="w-full inline-flex justify-center items-center px-4 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path></svg>
                            Choose Image from Library
                        </button>
                        <input type="hidden" id="selectedImageId" name="imageFileId" />
                        <div id="selectedImagePreview" class="mt-2"></div>
                        <div class="mt-3">
                            <label for="imageCaption" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Caption (optional)</label>
                            <input type="text" id="imageCaption" name="imageCaption" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Enter image caption...">
                        </div>
                    </div>

                    <!-- Video Message Input -->
                    <div id="videoMessageInput" style="display: none;">
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Video from Library</label>
                        <button type="button" id="chooseVideoBtn" class="w-full inline-flex justify-center items-center px-4 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 6a2 2 0 012-2h6l2 2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14 9a3 3 0 11-6 0 3 3 0 016 0zM11 11a1 1 0 11-2 0 1 1 0 012 0z"></path></svg>
                            Choose Video from Library
                        </button>
                        <input type="hidden" id="selectedVideoId" name="videoFileId" />
                        <div id="selectedVideoPreview" class="mt-2"></div>
                        <div class="mt-3">
                            <label for="videoCaption" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Caption (optional)</label>
                            <input type="text" id="videoCaption" name="videoCaption" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Enter video caption...">
                        </div>
                    </div>

                    <!-- Document Message Input -->
                    <div id="documentMessageInput" style="display: none;">
                        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Select Document from Library</label>
                        <button type="button" id="chooseDocumentBtn" class="w-full inline-flex justify-center items-center px-4 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path></svg>
                            Choose Document from Library
                        </button>
                        <input type="hidden" id="selectedDocumentId" name="documentFileId" />
                        <div id="selectedDocumentPreview" class="mt-2"></div>
                        <div class="mt-3">
                            <label for="fileName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">File Name (optional)</label>
                            <input type="text" id="fileName" name="fileName" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Enter file name...">
                        </div>
                    </div>

                    <button type="submit" disabled class="w-full text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path></svg>
                        Send Message
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Message History -->
    <div class="lg:col-span-1">
        <div class="bg-white shadow rounded-lg dark:bg-gray-800">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path></svg>
                    Recent Messages
                </h3>
            </div>
            <div class="p-6">
                <div id="messageHistory" class="space-y-3 max-h-96 overflow-y-auto">
                    <div class="text-center text-gray-500 dark:text-gray-400">No messages yet. Send a message to see history.</div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- File Selection Modals -->
<!-- Image Selection Modal -->
<div class="fixed left-0 right-0 z-50 items-center justify-center hidden overflow-x-hidden overflow-y-auto top-4 md:inset-0 h-modal sm:h-full" id="imageSelectionModal">
    <div class="relative w-full h-full max-w-4xl px-4 md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-800">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-700">
                <h3 class="text-xl font-semibold dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path></svg>
                    Choose Image from Library
                </h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-700 dark:hover:text-white" onclick="closeFileModal('image')">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>  
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6 space-y-6">
                <div id="imageList" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    <!-- Images will be loaded here -->
                </div>
                <div id="imageListEmpty" class="text-center text-gray-500 dark:text-gray-400" style="display: none;">
                    <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path></svg>
                    <p class="text-lg font-medium">No images found</p>
                    <p class="text-sm">Upload some images to your library first</p>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="items-center p-6 border-t border-gray-200 rounded-b dark:border-gray-700">
                <button class="text-gray-900 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 border border-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700" type="button" onclick="closeFileModal('image')">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Video Selection Modal -->
<div class="fixed left-0 right-0 z-50 items-center justify-center hidden overflow-x-hidden overflow-y-auto top-4 md:inset-0 h-modal sm:h-full" id="videoSelectionModal">
    <div class="relative w-full h-full max-w-4xl px-4 md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-800">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-700">
                <h3 class="text-xl font-semibold dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 6a2 2 0 012-2h6l2 2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14 9a3 3 0 11-6 0 3 3 0 016 0zM11 11a1 1 0 11-2 0 1 1 0 012 0z"></path></svg>
                    Choose Video from Library
                </h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-700 dark:hover:text-white" onclick="closeFileModal('video')">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>  
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6 space-y-6">
                <div id="videoList" class="space-y-3 max-h-96 overflow-y-auto">
                    <!-- Videos will be loaded here -->
                </div>
                <div id="videoListEmpty" class="text-center text-gray-500 dark:text-gray-400" style="display: none;">
                    <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 6a2 2 0 012-2h6l2 2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14 9a3 3 0 11-6 0 3 3 0 016 0zM11 11a1 1 0 11-2 0 1 1 0 012 0z"></path></svg>
                    <p class="text-lg font-medium">No videos found</p>
                    <p class="text-sm">Upload some videos to your library first</p>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="items-center p-6 border-t border-gray-200 rounded-b dark:border-gray-700">
                <button class="text-gray-900 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 border border-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700" type="button" onclick="closeFileModal('video')">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Document Selection Modal -->
<div class="fixed left-0 right-0 z-50 items-center justify-center hidden overflow-x-hidden overflow-y-auto top-4 md:inset-0 h-modal sm:h-full" id="documentSelectionModal">
    <div class="relative w-full h-full max-w-4xl px-4 md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-800">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-700">
                <h3 class="text-xl font-semibold dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path></svg>
                    Choose Document from Library
                </h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-700 dark:hover:text-white" onclick="closeFileModal('document')">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>  
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6 space-y-6">
                <div id="documentList" class="space-y-3 max-h-96 overflow-y-auto">
                    <!-- Documents will be loaded here -->
                </div>
                <div id="documentListEmpty" class="text-center text-gray-500 dark:text-gray-400" style="display: none;">
                    <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path></svg>
                    <p class="text-lg font-medium">No documents found</p>
                    <p class="text-sm">Upload some documents to your library first</p>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="items-center p-6 border-t border-gray-200 rounded-b dark:border-gray-700">
                <button class="text-gray-900 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-primary-300 border border-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700" type="button" onclick="closeFileModal('document')">Cancel</button>
            </div>
        </div>
    </div>
</div>

    <style>
        .bg-primary-50 { background-color: #eff6ff; }
        .bg-primary-100 { background-color: #dbeafe; }
        .bg-primary-500 { background-color: #3b82f6; }
        .bg-primary-600 { background-color: #2563eb; }
        .bg-primary-700 { background-color: #1d4ed8; }
        .bg-primary-800 { background-color: #1e40af; }
        .text-primary-600 { color: #2563eb; }
        .text-primary-700 { color: #1d4ed8; }
        .border-primary-300 { border-color: #93c5fd; }
        .border-primary-500 { border-color: #3b82f6; }
        .focus\:ring-primary-300:focus { box-shadow: 0 0 0 3px rgba(147, 197, 253, 0.5); }
        .focus\:ring-primary-500:focus { box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5); }
        .focus\:ring-primary-800:focus { box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.5); }
        .focus\:border-primary-500:focus { border-color: #3b82f6; }
        .hover\:bg-primary-800:hover { background-color: #1e40af; }
        .hover\:bg-primary-700:hover { background-color: #1d4ed8; }
        .dark .dark\:bg-primary-600 { background-color: #2563eb; }
        .dark .dark\:hover\:bg-primary-700:hover { background-color: #1d4ed8; }
        .dark .dark\:focus\:ring-primary-800:focus { box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.5); }
        .dark .dark\:focus\:ring-primary-600:focus { box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.5); }
        
        .message-item {
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 8px;
        }
        .message-incoming {
            background-color: #f3f4f6;
            border-left: 4px solid #2563eb;
        }
        .message-outgoing {
            background-color: #dcfce7;
            border-left: 4px solid #16a34a;
        }
        .dark .message-incoming {
            background-color: #374151;
            border-left-color: #3b82f6;
        }
        .dark .message-outgoing {
            background-color: #14532d;
            border-left-color: #22c55e;
        }
        
        .session-status-ready {
            background-color: #dcfce7 !important;
            border-color: #16a34a !important;
        }
        .session-status-not-ready {
            background-color: #fef3c7 !important;
            border-color: #f59e0b !important;
        }
        .dark .session-status-ready {
            background-color: #14532d !important;
            border-color: #22c55e !important;
        }
        .dark .session-status-not-ready {
            background-color: #451a03 !important;
            border-color: #f59e0b !important;
        }
    </style>
    <script>
        // Global variables
        let currentSessionId = null;
        const API_BASE_URL = '/api';

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function () {
            loadUserDevices();
            
            // Handle message type selection
            document.getElementById('messageType').addEventListener('change', function (e) {
                const textInput = document.getElementById('textMessageInput');
                const imageInput = document.getElementById('imageMessageInput');
                const videoInput = document.getElementById('videoMessageInput');
                const documentInput = document.getElementById('documentMessageInput');
                const messageTextarea = document.getElementById('message');

                // Hide all inputs first
                textInput.style.display = 'none';
                imageInput.style.display = 'none';
                videoInput.style.display = 'none';
                documentInput.style.display = 'none';

                // Reset requirements
                messageTextarea.required = false;

                // Clear any selected files
                clearSelectedFile('image');
                clearSelectedFile('video');
                clearSelectedFile('document');

                // Show appropriate input based on selection
                switch (e.target.value) {
                    case 'image':
                        imageInput.style.display = 'block';
                        break;
                    case 'video':
                        videoInput.style.display = 'block';
                        break;
                    case 'document':
                        documentInput.style.display = 'block';
                        break;
                    default: // text
                        textInput.style.display = 'block';
                        messageTextarea.required = true;
                }
            });

            // File selection handlers
            document.getElementById('chooseImageBtn').addEventListener('click', function () {
                openFileSelectionModal('image');
            });

            document.getElementById('chooseVideoBtn').addEventListener('click', function () {
                openFileSelectionModal('video');
            });

            document.getElementById('chooseDocumentBtn').addEventListener('click', function () {
                openFileSelectionModal('document');
            });
            
            // Session selector change handler
            document.getElementById('sessionSelect').addEventListener('change', function (e) {
                currentSessionId = e.target.value;
                const sendButton = document.querySelector('#sendMessageForm button[type="submit"]');
                
                // Get the selected option to check its status
                const selectedOption = e.target.selectedOptions[0];
                const sessionStatus = selectedOption?.dataset.status;
                const isReady = selectedOption?.dataset.isReady === 'true';

                // Enable button only if session is selected and ready
                sendButton.disabled = !currentSessionId || !isReady;

                // Update button text and title based on status
                if (currentSessionId) {
                    // Show status indicator
                    const statusIndicator = document.getElementById('sessionStatusIndicator');
                    const statusIcon = document.getElementById('sessionStatusIcon');
                    const statusText = document.getElementById('sessionStatusText');

                    statusIndicator.style.display = 'block';
                    statusIcon.textContent = getStatusEmoji(sessionStatus);

                    if (isReady) {
                        sendButton.innerHTML = '<svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path></svg>Send Message';
                        sendButton.title = 'Ready to send messages';
                        sendButton.className = 'w-full text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800';
                        statusText.innerHTML = '<span class="text-green-600 dark:text-green-400"><strong>Ready to send messages</strong> - Session is connected</span>';
                        
                        // Apply ready styles to session selector
                        document.getElementById('sessionSelect').className = 'shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 session-status-ready';
                        
                        showAlert(`Session ready for messaging: ${currentSessionId} [${sessionStatus}]`, 'success');
                    } else {
                        sendButton.innerHTML = `<svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>Session Not Ready [${sessionStatus?.toUpperCase()}]`;
                        sendButton.title = `Cannot send messages - Session status: ${sessionStatus}. Please wait for connection or scan QR code.`;
                        sendButton.className = 'w-full text-white bg-yellow-600 hover:bg-yellow-700 focus:ring-4 focus:ring-yellow-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-yellow-600 dark:hover:bg-yellow-700 dark:focus:ring-yellow-800';

                        // Provide specific status messages
                        let statusMessage = '';
                        switch (sessionStatus) {
                            case 'pending':
                                statusMessage = 'Waiting for QR code scan - Please scan the QR code with WhatsApp';
                                break;
                            case 'connecting':
                                statusMessage = 'Connecting to WhatsApp - Please wait...';
                                break;
                            case 'disconnected':
                                statusMessage = 'Disconnected - Please reconnect the session';
                                break;
                            case 'logged_out':
                                statusMessage = 'Logged out - Please login again';
                                break;
                            case 'error':
                                statusMessage = 'Error occurred - Please check the session';
                                break;
                            default:
                                statusMessage = `Status: ${sessionStatus} - Cannot send messages`;
                        }
                        statusText.innerHTML = `<span class="text-yellow-600 dark:text-yellow-400"><strong>Cannot send messages</strong> - ${statusMessage}</span>`;

                        // Apply not-ready styles to session selector
                        document.getElementById('sessionSelect').className = 'shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 session-status-not-ready';
                        
                        showAlert(`Session not ready for messaging: ${currentSessionId} [${sessionStatus}]`, 'warning');
                    }
                } else {
                    // Hide status indicator when no session selected
                    document.getElementById('sessionStatusIndicator').style.display = 'none';
                    sendButton.innerHTML = '<svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path></svg>Send Message';
                    sendButton.title = 'Select a session first';
                    sendButton.className = 'w-full text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800';

                    // Reset session selector styling
                    document.getElementById('sessionSelect').className = 'shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500';
                }
            });

            // Form submission handler
            document.getElementById('sendMessageForm').addEventListener('submit', sendMessage);

            // Test connection button handler
            document.getElementById('testConnectionBtn').addEventListener('click', testAPIConnection);
        });

        // Load user devices
        async function loadUserDevices() {
            try {
                const response = await fetch(`${API_BASE_URL}/whatsapp/devices`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Failed to fetch devices');
                }

                const sessionSelect = document.getElementById('sessionSelect');
                
                // Clear existing options
                while (sessionSelect.options.length > 1) {
                    sessionSelect.remove(1);
                }

                if (data.data && data.data.devices && data.data.devices.length > 0) {
                    data.data.devices.forEach((device) => {
                        // Create status emoji and text
                        const statusEmoji = getStatusEmoji(device.status);
                        const statusText = device.status.toUpperCase();

                        // Create option with status information
                        const optionText = `${statusEmoji} ${device.userId} - ${device.alias} [${statusText}]`;
                        const option = new Option(optionText, device.sessionId);

                        // Add data attributes for status checking
                        option.dataset.deviceId = device.id;
                        option.dataset.status = device.status;
                        option.dataset.isReady = device.status === 'connected' ? 'true' : 'false';

                        // Style non-connected options differently
                        if (device.status !== 'connected') {
                            option.style.color = '#6c757d';
                            option.style.fontStyle = 'italic';
                        }

                        sessionSelect.add(option);
                    });

                    showAlert(`Loaded ${data.data.devices.length} devices`, 'success');
                } else {
                    showAlert('No devices found. Please create a device first.', 'info');
                }
            } catch (error) {
                console.error('Error loading devices:', error);
                showAlert(`Failed to load devices: ${error.message}`, 'error');
            }
        }

        // Send message function
        async function sendMessage(e) {
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);
            const messageType = formData.get('messageType');
            const recipient = formData.get('recipient');
            const sessionId = formData.get('sessionId');

            console.log('=== SEND MESSAGE DEBUG (FRONTEND) ===');
            console.log('Message type:', messageType);
            console.log('Recipient:', recipient);
            console.log('Session ID:', sessionId);

            if (!sessionId) {
                addStatusMessage('error', 'Please select a session');
                return;
            }

            // Check if the selected session is ready for messaging
            const sessionSelect = document.getElementById('sessionSelect');
            const selectedOption = sessionSelect.selectedOptions[0];
            const sessionStatus = selectedOption?.dataset.status;
            const isReady = selectedOption?.dataset.isReady === 'true';

            console.log('Session status:', sessionStatus);
            console.log('Session ready:', isReady);

            if (!isReady) {
                const statusMessage = sessionStatus ? ` (Status: ${sessionStatus})` : '';
                addStatusMessage('error', `Cannot send message - Session is not connected${statusMessage}. Please wait for the session to connect or scan the QR code.`);
                return;
            }

            try {
                form.querySelector('button[type="submit"]').disabled = true;
                form.querySelector('button[type="submit"]').innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Sending...';

                let endpoint;
                let requestData = {
                    sessionId,
                    recipient,
                };

                if (messageType === 'text') {
                    endpoint = `${API_BASE_URL}/whatsapp/send`;
                    requestData.message = formData.get('message');
                } else {
                    endpoint = `${API_BASE_URL}/whatsapp/send/${messageType}`;

                    // Get selected file ID
                    let fileId;
                    if (messageType === 'image') {
                        fileId = document.getElementById('selectedImageId').value;
                        requestData.caption = formData.get('imageCaption');
                        console.log('Selected image file ID:', fileId);
                        console.log('Image caption:', requestData.caption);
                    } else if (messageType === 'video') {
                        fileId = document.getElementById('selectedVideoId').value;
                        requestData.caption = formData.get('videoCaption');
                        console.log('Selected video file ID:', fileId);
                        console.log('Video caption:', requestData.caption);
                    } else if (messageType === 'document') {
                        fileId = document.getElementById('selectedDocumentId').value;
                        requestData.fileName = formData.get('fileName');
                        console.log('Selected document file ID:', fileId);
                        console.log('Document filename:', requestData.fileName);
                    }

                    if (!fileId) {
                        throw new Error(`Please select a ${messageType} file from your library`);
                    }

                    requestData.fileId = fileId;
                }

                console.log('Request endpoint:', endpoint);
                console.log('Request data:', requestData);

                // All requests now use JSON
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });

                console.log('Response status:', response.status);
                console.log('Response OK:', response.ok);

                const data = await response.json();
                console.log('Response data:', data);

                if (!response.ok) {
                    console.error('Response not OK. Status:', response.status);
                    console.error('Error data:', data);
                    throw new Error(data.message || data.error || 'Failed to send message');
                }

                console.log('Message sent successfully!');
                addStatusMessage('success', `${messageType} message sent successfully!`);
                
                // Reset form
                form.reset();
                document.getElementById('messageType').dispatchEvent(new Event('change'));

                // Clear selected files and previews
                clearSelectedFile('image');
                clearSelectedFile('video');
                clearSelectedFile('document');

                // Update message history
                loadMessageHistory(sessionId);
            } catch (error) {
                console.error('=== SEND MESSAGE ERROR (FRONTEND) ===');
                console.error('Error type:', error.name);
                console.error('Error message:', error.message);
                console.error('Full error:', error);
                addStatusMessage('error', `Error sending message: ${error.message}`);
            } finally {
                form.querySelector('button[type="submit"]').disabled = false;
                form.querySelector('button[type="submit"]').innerHTML = '<i class="bi bi-send"></i> Send Message';
            }
        }

        // Load message history
        async function loadMessageHistory(sessionId) {
            try {
                const response = await fetch(`${API_BASE_URL}/whatsapp/messages?sessionId=${sessionId}&limit=10`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) return;

                const data = await response.json();
                const historyContainer = document.getElementById('messageHistory');

                // Handle the API response structure
                const messages = data.data?.messages || data.messages || [];

                if (messages.length > 0) {
                    historyContainer.innerHTML = messages
                        .map((msg) => `
                            <div class="mb-2 p-2 border rounded ${msg.direction === 'outgoing' ? 'bg-light' : ''}">
                                <small class="text-muted">${new Date(msg.timestamp).toLocaleString()}</small>
                                <div><strong>${msg.direction === 'outgoing' ? 'Sent to' : 'From'}:</strong> ${msg.recipient || msg.from}</div>
                                <div>${msg.message || msg.caption || '[Media]'}</div>
                            </div>
                        `)
                        .join('');
                } else {
                    historyContainer.innerHTML = '<div class="text-muted">No messages found</div>';
                }
            } catch (error) {
                console.error('Failed to load message history:', error);
                document.getElementById('messageHistory').innerHTML = '<div class="text-muted">Failed to load message history</div>';
            }
        }

        // Helper function to get status emoji
        function getStatusEmoji(status) {
            switch (status) {
                case 'connected':
                    return '🟢';
                case 'pending':
                    return '🟡';
                case 'connecting':
                    return '🔄';
                case 'disconnected':
                    return '🔴';
                case 'error':
                    return '❌';
                case 'auth_failed':
                    return '🚫';
                case 'logged_out':
                    return '⚪';
                case 'reconnecting':
                    return '🔄';
                default:
                    return '⚫';
            }
        }

        // Add status message
        function addStatusMessage(type, message) {
            const statusContainer = document.getElementById('statusMessages');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            statusContainer.appendChild(alertDiv);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Modal Functions
        function openFileSelectionModal(fileType) {
            const modal = document.getElementById(`${fileType}SelectionModal`);
            const listContainer = document.getElementById(`${fileType}List`);
            const emptyContainer = document.getElementById(`${fileType}ListEmpty`);

            // Show loading
            listContainer.innerHTML = `
                <div class="text-center p-8">
                    <div class="animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent text-primary-600 rounded-full" role="status" aria-label="loading">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <p class="mt-2 text-gray-600 dark:text-gray-400">Loading files...</p>
                </div>
            `;
            emptyContainer.style.display = 'none';

            modal.classList.remove('hidden');

            loadFiles(fileType);
        }

        function closeFileModal(fileType) {
            const modal = document.getElementById(`${fileType}SelectionModal`);
            modal.classList.add('hidden');
        }

        async function loadFiles(fileType) {
            const listContainer = document.getElementById(`${fileType}List`);
            const emptyContainer = document.getElementById(`${fileType}ListEmpty`);

            try {
                // Get all files and filter by type on client side
                const response = await fetch(`${API_BASE_URL}/whatsapp/files?limit=100`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`Failed to load files`);
                }

                const data = await response.json();
                let files = [];

                if (data.data && data.data.length > 0) {
                    // Filter files by type on client side
                    files = data.data.filter(file => {
                        const fileName = file.originalName || file.name || '';
                        const extension = fileName.split('.').pop()?.toLowerCase();
                        
                        if (fileType === 'image') {
                            const imageExts = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];
                            return imageExts.includes(extension) || file.fileType === 'image';
                        } else if (fileType === 'video') {
                            const videoExts = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'];
                            return videoExts.includes(extension) || file.fileType === 'video';
                        } else if (fileType === 'document') {
                            const docExts = ['pdf', 'doc', 'docx', 'txt', 'rtf'];
                            return docExts.includes(extension) || file.fileType === 'document';
                        }
                        return false;
                    });
                }

                if (files.length > 0) {
                    displayFiles(fileType, files);
                    emptyContainer.style.display = 'none';
                } else {
                    listContainer.innerHTML = '';
                    emptyContainer.style.display = 'block';
                }
            } catch (error) {
                console.error(`Error loading ${fileType} files:`, error);
                listContainer.innerHTML = `<div class="p-4 bg-red-100 border border-red-400 text-red-700 rounded">Error loading files: ${error.message}</div>`;
                emptyContainer.style.display = 'none';
            }
        }

        function displayFiles(fileType, files) {
            const listContainer = document.getElementById(`${fileType}List`);

            if (fileType === 'image') {
                // Grid layout for images
                listContainer.innerHTML = files.map(file => `
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 cursor-pointer hover:shadow-md transition-shadow dark:bg-gray-800 dark:border-gray-700" onclick="selectFile('${fileType}', '${file.id}', '${file.originalName || file.name}')">
                        <img src="/api/whatsapp/files/${file.id}/preview" class="w-full h-32 object-cover rounded-t-lg" 
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        <div class="w-full h-32 bg-gray-100 rounded-t-lg flex items-center justify-center text-gray-400 dark:bg-gray-700" style="display: none;">
                            <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path></svg>
                        </div>
                        <div class="p-3">
                            <h6 class="text-sm font-medium text-gray-900 dark:text-white truncate" title="${file.originalName || file.name}">
                                ${(file.originalName || file.name).length > 20 ? (file.originalName || file.name).substring(0, 20) + '...' : (file.originalName || file.name)}
                            </h6>
                            <p class="text-xs text-gray-500 dark:text-gray-400">${formatFileSize(file.size || 0)} • Used ${file.usageCount || 0} times</p>
                        </div>
                    </div>
                `).join('');
            } else {
                // List layout for videos and documents
                listContainer.innerHTML = files.map(file => `
                    <div class="p-4 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700" onclick="selectFile('${fileType}', '${file.id}', '${file.originalName || file.name}')">
                        <div class="flex justify-between items-start">
                            <h6 class="text-sm font-medium text-gray-900 dark:text-white">${file.originalName || file.name}</h6>
                            <span class="text-xs text-gray-500 dark:text-gray-400">${formatFileSize(file.size || 0)}</span>
                        </div>
                        <p class="text-sm text-gray-600 dark:text-gray-300 mt-1">${file.description || 'No description'}</p>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">Used ${file.usageCount || 0} times • ${new Date(file.createdAt || file.created_at).toLocaleDateString()}</p>
                    </div>
                `).join('');
            }
        }

        function selectFile(fileType, fileId, fileName) {
            // Store selected file ID
            document.getElementById(`selected${fileType.charAt(0).toUpperCase() + fileType.slice(1)}Id`).value = fileId;

            // Update preview
            const previewContainer = document.getElementById(`selected${fileType.charAt(0).toUpperCase() + fileType.slice(1)}Preview`);

            if (fileType === 'image') {
                previewContainer.innerHTML = `
                    <div class="p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg dark:bg-green-900 dark:border-green-600 dark:text-green-300">
                        <div class="flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>
                            Selected: ${fileName}
                        </div>
                        <img src="/api/whatsapp/files/${fileId}/preview" class="mt-2 max-w-full h-32 object-cover rounded" />
                    </div>
                `;
            } else {
                previewContainer.innerHTML = `
                    <div class="p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg dark:bg-green-900 dark:border-green-600 dark:text-green-300">
                        <div class="flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>
                            Selected: ${fileName}
                        </div>
                    </div>
                `;
            }

            // Auto-fill filename for documents
            if (fileType === 'document') {
                const fileNameInput = document.getElementById('fileName');
                if (!fileNameInput.value) {
                    fileNameInput.value = fileName;
                }
            }

            // Close modal
            closeFileModal(fileType);

            showAlert(`Selected ${fileType} file: ${fileName}`, 'success');
        }

        function clearSelectedFile(fileType) {
            document.getElementById(`selected${fileType.charAt(0).toUpperCase() + fileType.slice(1)}Id`).value = '';
            document.getElementById(`selected${fileType.charAt(0).toUpperCase() + fileType.slice(1)}Preview`).innerHTML = '';
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Alert function
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            if (!alertContainer) return;

            const alertTypes = {
                success: 'bg-green-100 border-green-500 text-green-700 dark:bg-green-900 dark:border-green-600 dark:text-green-300',
                error: 'bg-red-100 border-red-500 text-red-700 dark:bg-red-900 dark:border-red-600 dark:text-red-300',
                warning: 'bg-yellow-100 border-yellow-500 text-yellow-700 dark:bg-yellow-900 dark:border-yellow-600 dark:text-yellow-300',
                info: 'bg-blue-100 border-blue-500 text-blue-700 dark:bg-blue-900 dark:border-blue-600 dark:text-blue-300'
            };

            const iconTypes = {
                success: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>',
                error: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
                warning: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
                info: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>'
            };

            const alertId = 'alert-' + Date.now();
            const alertElement = document.createElement('div');
            alertElement.id = alertId;
            alertElement.className = `flex items-center p-4 mb-4 border rounded-lg ${alertTypes[type] || alertTypes.info}`;
            alertElement.innerHTML = `
                <div class="flex-shrink-0">
                    ${iconTypes[type] || iconTypes.info}
                </div>
                <div class="ml-3 text-sm font-medium">
                    ${message}
                </div>
                <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:hover:bg-gray-700" onclick="document.getElementById('${alertId}').remove()">
                    <span class="sr-only">Close</span>
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            `;

            alertContainer.appendChild(alertElement);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (document.getElementById(alertId)) {
                    document.getElementById(alertId).remove();
                }
            }, 5000);
        }

        // Test API Connection
        async function testAPIConnection() {
            const testBtn = document.getElementById('testConnectionBtn');
            const originalText = testBtn.innerHTML;

            try {
                testBtn.disabled = true;
                testBtn.innerHTML = '<div class="animate-spin inline-block w-4 h-4 border-2 border-current border-t-transparent rounded-full mr-2"></div>Testing...';

                console.log('=== API CONNECTION TEST ===');
                console.log('Testing connection to WhatsApp API...');

                const response = await fetch(`${API_BASE_URL}/whatsapp/test`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                console.log('Test response status:', response.status);
                console.log('Test response OK:', response.ok);

                const data = await response.json();
                console.log('Test response data:', data);

                if (response.ok && data.success) {
                    showAlert(`✅ API Connection successful! External API is running on ${data.data.baseUrl}`, 'success');
                    console.log('API Connection test passed');
                } else {
                    const errorMsg = data.error?.isConnectionRefused 
                        ? `❌ WhatsApp API service is not running on ${data.error.baseUrl}. Please start the external service.`
                        : `❌ API Connection failed: ${data.message || 'Unknown error'}`;
                    showAlert(errorMsg, 'error');
                    console.error('API Connection test failed:', data);
                }

            } catch (error) {
                console.error('=== API CONNECTION TEST ERROR ===');
                console.error('Error type:', error.name);
                console.error('Error message:', error.message);
                console.error('Full error:', error);

                showAlert(`❌ Failed to test API connection: ${error.message}`, 'error');
            } finally {
                testBtn.disabled = false;
                testBtn.innerHTML = originalText;
            }
        }
    </script>
</body>
</html> 