<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body class="bg-gray-100">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <a href="/dashboard" class="text-xl font-bold text-gray-800">Dashboard</a>
                    <span class="mx-2">/</span>
                    <h1 class="text-xl font-bold"><%= title %></h1>
                </div>
                <div class="flex items-center">
                    <span class="mr-4">Welcome, <%= user.full_name %></span>
                    <a href="/logout" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
            
            <!-- Header with Create Button -->
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">Contact Management</h2>
                <div class="flex space-x-3">
                    <button onclick="downloadTemplate()" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                        üì• Download Template
                    </button>
                    <button onclick="openImportModal()" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
                        üì§ Import CSV
                    </button>
                    <button onclick="openCreateModal()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        + Create Contact
                    </button>
                </div>
            </div>

            <!-- Alert Messages -->
            <div id="alert-container" class="mb-4"></div>

            <!-- Contacts Table -->
            <div class="bg-white shadow overflow-hidden sm:rounded-md">
                <% if (contacts.length > 0) { %>
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tag</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="contacts-table-body" class="bg-white divide-y divide-gray-200">
                            <% contacts.forEach(contact => { %>
                                <tr id="contact-row-<%= contact.id %>">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div>
                                            <div class="text-sm font-medium text-gray-900"><%= contact.name %></div>
                                            <% if (contact.notes) { %>
                                                <div class="text-sm text-gray-500"><%= contact.notes.substring(0, 50) %><%= contact.notes.length > 50 ? '...' : '' %></div>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <%= contact.phone %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <%= contact.email || '-' %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <% if (contact.tag) { %>
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                üè∑Ô∏è <%= contact.tag.name %>
                                            </span>
                                        <% } else { %>
                                            <span class="text-gray-400">No tag</span>
                                        <% } %>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                        <button onclick="viewContact('<%= contact.id %>')" class="text-blue-600 hover:text-blue-900 mr-3">View</button>
                                        <button onclick="editContact('<%= contact.id %>')" class="text-green-600 hover:text-green-900 mr-3">Edit</button>
                                        <button onclick="deleteContact('<%= contact.id %>')" class="text-red-600 hover:text-red-900">Delete</button>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                <% } else { %>
                    <div class="text-center py-12">
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No contacts yet</h3>
                        <p class="text-gray-500">Start by creating your first contact.</p>
                        <button onclick="openCreateModal()" class="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            + Create Contact
                        </button>
                    </div>
                <% } %>
            </div>

        </div>
    </main>

    <!-- Create/Edit Modal -->
    <div id="contact-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-bold text-gray-900 mb-4" id="modal-title">Create Contact</h3>
                <form id="contact-form">
                    <input type="hidden" id="contact-id" name="contact_id">
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Name *</label>
                            <input type="text" id="name" name="name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500" required>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Phone *</label>
                            <input type="tel" id="phone" name="phone" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500" required>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                            <input type="email" id="email" name="email" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Tag</label>
                            <select id="tag_id" name="tag_id" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                                <option value="">Select Tag</option>
                                <% tags.forEach(tag => { %>
                                    <option value="<%= tag.id %>"><%= tag.name %></option>
                                <% }); %>
                            </select>
                        </div>
                        
                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                            <textarea id="notes" name="notes" rows="3" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Optional notes about this contact"></textarea>
                        </div>
                    </div>
                    
                    <div class="flex justify-end mt-6 space-x-3">
                        <button type="button" onclick="closeModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
                            Cancel
                        </button>
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- View Modal -->
    <div id="view-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-bold text-gray-900 mb-4">Contact Details</h3>
                <div id="contact-details"></div>
                <div class="flex justify-end mt-6">
                    <button onclick="closeViewModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Import CSV Modal -->
    <div id="import-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-bold text-gray-900 mb-4">Import Contacts from CSV</h3>
                
                <!-- Instructions -->
                <div class="bg-blue-50 border border-blue-200 rounded-md p-4 mb-4">
                    <h4 class="font-semibold text-blue-800 mb-2">üìã Instructions:</h4>
                    <ul class="text-sm text-blue-700 space-y-1">
                        <li>‚Ä¢ Download the template first to see the correct format</li>
                        <li>‚Ä¢ <strong>Required fields:</strong> name, phone</li>
                        <li>‚Ä¢ <strong>Optional fields:</strong> email, notes, tag_name</li>
                        <li>‚Ä¢ <strong>Phone format:</strong> Use international format (e.g., 628123456789)</li>
                        <li>‚Ä¢ <strong>Tag handling:</strong> Tags will be created automatically if they don't exist</li>
                        <li>‚Ä¢ <strong>File size:</strong> Maximum 5MB</li>
                        <li>‚Ä¢ <strong>Encoding:</strong> Use UTF-8 encoding for proper character support</li>
                    </ul>
                </div>

                <!-- CSV Format Example -->
                <div class="bg-gray-50 border border-gray-200 rounded-md p-4 mb-4">
                    <h4 class="font-semibold text-gray-800 mb-2">üìÑ CSV Format Example:</h4>
                    <div class="bg-white border rounded p-3 text-sm font-mono">
                        name,phone,email,notes,tag_name<br>
                        John Doe,628123456789,john@example.com,Important client,Client<br>
                        Jane Smith,628987654321,jane@example.com,Regular contact,Partner
                    </div>
                </div>

                <!-- File Upload -->
                <form id="import-form" enctype="multipart/form-data">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Select CSV File</label>
                        <input type="file" id="csv-file" name="csv_file" accept=".csv" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500" required>
                    </div>

                    <!-- Preview Section -->
                    <div id="csv-preview" class="mb-4 hidden">
                        <h4 class="font-semibold text-gray-800 mb-2">üìä Preview (First 5 rows):</h4>
                        <div class="bg-gray-50 border rounded-md p-3 max-h-40 overflow-y-auto">
                            <div id="preview-content" class="text-sm font-mono"></div>
                        </div>
                    </div>

                    <!-- Import Options -->
                    <div class="mb-4">
                        <label class="flex items-center">
                            <input type="checkbox" id="skip-duplicates" name="skip_duplicates" class="mr-2">
                            <span class="text-sm text-gray-700">Skip duplicate contacts (based on phone number)</span>
                        </label>
                    </div>

                    <div class="flex justify-end mt-6 space-x-3">
                        <button type="button" onclick="closeImportModal()" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
                            Cancel
                        </button>
                        <button type="submit" id="import-btn" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
                            Import Contacts
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let isEdit = false;

        function openCreateModal() {
            isEdit = false;
            document.getElementById('modal-title').textContent = 'Create Contact';
            document.getElementById('contact-form').reset();
            document.getElementById('contact-id').value = '';
            document.getElementById('contact-modal').classList.remove('hidden');
        }

        function editContact(id) {
            isEdit = true;
            document.getElementById('modal-title').textContent = 'Edit Contact';
            
            fetch(`/dashboard/contacts/${id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.contact) {
                        const contact = data.contact;
                        console.log('Contact data for editing:', contact);
                        
                        document.getElementById('contact-id').value = contact.id;
                        document.getElementById('name').value = contact.name || '';
                        document.getElementById('phone').value = contact.phone || '';
                        document.getElementById('email').value = contact.email || '';
                        document.getElementById('notes').value = contact.notes || '';
                        document.getElementById('tag_id').value = contact.tag_id || '';
                        
                        document.getElementById('contact-modal').classList.remove('hidden');
                    } else {
                        showAlert('Contact not found', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading contact data', 'error');
                });
        }

        function viewContact(id) {
            fetch(`/dashboard/contacts/${id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.contact) {
                        const contact = data.contact;
                        document.getElementById('contact-details').innerHTML = `
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div><strong>Name:</strong> ${contact.name}</div>
                                <div><strong>Phone:</strong> ${contact.phone}</div>
                                <div><strong>Email:</strong> ${contact.email || '-'}</div>
                                <div><strong>Tag:</strong> ${contact.tag ? contact.tag.name : 'No tag'}</div>
                                <div class="md:col-span-2"><strong>Notes:</strong> ${contact.notes || '-'}</div>
                                <div><strong>Created:</strong> ${new Date(contact.created_at).toLocaleDateString()}</div>
                                <div><strong>Updated:</strong> ${new Date(contact.updated_at).toLocaleDateString()}</div>
                            </div>
                        `;
                        document.getElementById('view-modal').classList.remove('hidden');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading contact data', 'error');
                });
        }

        function deleteContact(id) {
            if (confirm('Are you sure you want to delete this contact?')) {
                fetch(`/dashboard/contacts/${id}/delete`, {
                    method: 'POST',
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById(`contact-row-${id}`).remove();
                        showAlert(data.message, 'success');
                    } else {
                        showAlert(data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error deleting contact', 'error');
                });
            }
        }

        function closeModal() {
            document.getElementById('contact-modal').classList.add('hidden');
        }

        function closeViewModal() {
            document.getElementById('view-modal').classList.add('hidden');
        }

        function closeImportModal() {
            document.getElementById('import-modal').classList.add('hidden');
        }

        function showAlert(message, type) {
            const alertContainer = document.getElementById('alert-container');
            const alertClass = type === 'success' ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700';
            
            alertContainer.innerHTML = `
                <div class="${alertClass} border px-4 py-3 rounded mb-4">
                    ${message}
                </div>
            `;
            
            setTimeout(() => {
                alertContainer.innerHTML = '';
            }, 5000);
        }

        // Form submission
        document.getElementById('contact-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            
            // Debug: Log the form data
            console.log('Form data before sending:', data);
            console.log('Is edit mode:', isEdit);
            
            const url = isEdit ? `/dashboard/contacts/${data.contact_id}` : '/dashboard/contacts';
            const method = 'POST';
            
            // Clean up the data - remove empty strings and convert to proper types
            const cleanedData = {};
            Object.keys(data).forEach(key => {
                if (data[key] !== '' && data[key] !== undefined) {
                    cleanedData[key] = data[key];
                }
            });
            
            console.log('Cleaned data:', cleanedData);
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(cleanedData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeModal();
                    showAlert(data.message, 'success');
                    // Reload page to refresh data
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showAlert(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error saving contact', 'error');
            });
        });

        function downloadTemplate() {
            // Create CSV template content with better examples
            const csvContent = `name,phone,email,notes,tag_name
John Doe,628123456789,john@example.com,Important client for project A,Client
Jane Smith,628987654321,jane@example.com,Regular contact - monthly meeting,Partner
Bob Johnson,628555123456,bob@example.com,New vendor contact,Vendor
Sarah Wilson,628111222333,sarah@example.com,Marketing team contact,Marketing
Mike Brown,628444555666,mike@example.com,Technical support contact,Support`;

            // Create blob and download
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', 'contacts_template.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function openImportModal() {
            document.getElementById('import-modal').classList.remove('hidden');
            document.getElementById('import-form').reset();
            document.getElementById('csv-preview').classList.add('hidden');
        }

        // CSV file preview
        document.getElementById('csv-file').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                // Validate file size
                if (file.size > 5 * 1024 * 1024) {
                    showAlert('File size too large. Maximum size is 5MB.', 'error');
                    this.value = '';
                    return;
                }

                // Validate file type
                if (!file.name.endsWith('.csv') && file.type !== 'text/csv') {
                    showAlert('Please select a valid CSV file.', 'error');
                    this.value = '';
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const csvContent = e.target.result;
                    const lines = csvContent.split('\n').slice(0, 6); // First 6 lines (header + 5 data rows)
                    const previewContent = lines.map(line => line.replace(/,/g, ' | ')).join('\n');
                    
                    document.getElementById('preview-content').textContent = previewContent;
                    document.getElementById('csv-preview').classList.remove('hidden');
                };
                reader.onerror = function() {
                    showAlert('Error reading file. Please try again.', 'error');
                };
                reader.readAsText(file);
            }
        });

        // Import form submission
        document.getElementById('import-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const importBtn = document.getElementById('import-btn');
            const originalText = importBtn.textContent;
            
            // Show loading state
            importBtn.disabled = true;
            importBtn.textContent = 'Importing...';
            
            fetch('/dashboard/contacts/import', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`Successfully imported ${data.imported_count} contacts! ${data.skipped_count > 0 ? `Skipped ${data.skipped_count} duplicates.` : ''}`, 'success');
                    closeImportModal();
                    
                    // Update contacts list without page refresh
                    if (data.imported_count > 0) {
                        updateContactsList();
                    }
                } else {
                    showAlert(data.message || 'Import failed', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error importing contacts', 'error');
            })
            .finally(() => {
                importBtn.disabled = false;
                importBtn.textContent = originalText;
            });
        });

        // Function to update contacts list without page refresh
        function updateContactsList() {
            fetch('/dashboard/contacts')
                .then(response => response.text())
                .then(html => {
                    // Create a temporary div to parse the HTML
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    
                    // Extract the contacts table body
                    const newTableBody = tempDiv.querySelector('#contacts-table-body');
                    const currentTableBody = document.getElementById('contacts-table-body');
                    
                    if (newTableBody && currentTableBody) {
                        currentTableBody.innerHTML = newTableBody.innerHTML;
                    }
                    
                    // Update empty state if needed
                    const newEmptyState = tempDiv.querySelector('.text-center.py-12');
                    const currentEmptyState = document.querySelector('.text-center.py-12');
                    
                    if (newEmptyState && currentEmptyState) {
                        currentEmptyState.innerHTML = newEmptyState.innerHTML;
                    } else if (newEmptyState && !currentEmptyState) {
                        // If there was no empty state before, replace the table
                        const tableContainer = document.querySelector('.bg-white.shadow.overflow-hidden.sm\\:rounded-md');
                        if (tableContainer) {
                            tableContainer.innerHTML = newEmptyState.outerHTML;
                        }
                    } else if (!newEmptyState && currentEmptyState) {
                        // If there's no empty state now, replace with table
                        const tableContainer = document.querySelector('.bg-white.shadow.overflow-hidden.sm\\:rounded-md');
                        if (tableContainer) {
                            const newTable = tempDiv.querySelector('.bg-white.shadow.overflow-hidden.sm\\:rounded-md');
                            if (newTable) {
                                tableContainer.innerHTML = newTable.innerHTML;
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating contacts list:', error);
                    // Fallback to page refresh if update fails
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                });
        }
    </script>
</body>
</html> 