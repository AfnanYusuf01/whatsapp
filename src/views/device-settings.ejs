<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Settings - <%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body class="bg-gray-100 dark:bg-gray-900">

<div class="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5 dark:bg-gray-800 dark:border-gray-700">
    <div class="w-full mb-1">
        <div class="mb-4">
            <nav class="flex mb-5" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 text-sm font-medium md:space-x-2">
                  <li class="inline-flex items-center">
                    <a href="/dashboard" class="inline-flex items-center text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-white">
                      <svg class="w-5 h-5 mr-2.5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                      Home
                    </a>
                  </li>
                  <li>
                    <div class="flex items-center">
                      <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                      <a href="/dashboard/devices" class="ml-1 text-gray-700 hover:text-primary-600 md:ml-2 dark:text-gray-300 dark:hover:text-white">Devices</a>
                    </div>
                  </li>
                  <li>
                    <div class="flex items-center">
                      <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
                      <span class="ml-1 text-gray-400 md:ml-2 dark:text-gray-500" aria-current="page">Settings</span>
                    </div>
                  </li>
                </ol>
            </nav>
            <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl dark:text-white">Device Settings</h1>
            <p class="text-sm text-gray-500 dark:text-gray-400">Device ID: <strong><%= deviceId %></strong> - Configure AI settings and business intelligence</p>
        </div>
        <div class="sm:flex">
            <div class="items-center hidden mb-3 sm:flex sm:divide-x sm:divide-gray-100 sm:mb-0 dark:divide-gray-700">
                <div class="flex pl-0 mt-3 space-x-1 sm:pl-2 sm:mt-0">
                    <a href="/dashboard/devices" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" title="Back to Devices">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path></svg>
                    </a>
                    <button id="testAIBtn" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" title="Test AI Configuration">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path></svg>
                    </button>
                </div>
            </div>
            <div class="flex items-center ml-auto space-x-2 sm:space-x-3">
                <button type="button" id="saveAllSettingsBtn" class="inline-flex items-center justify-center w-1/2 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 sm:w-auto dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
                    Save All Settings
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Alert Messages -->
<div id="alert-container" class="mb-4"></div>

<div class="container mx-auto px-4 py-6">
<!-- Tabs Navigation -->
<div class="mb-6">
    <div class="border-b border-gray-200 dark:border-gray-700">
        <nav class="-mb-px flex space-x-8" aria-label="Tabs">
            <button class="border-primary-500 text-primary-600 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm active" id="ai-settings-tab" onclick="switchTab('ai-settings')">
                <svg class="w-4 h-4 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path></svg>
                AI Settings
            </button>
            <button class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm" id="business-config-tab" onclick="switchTab('business-config')">
                <svg class="w-4 h-4 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"></path></svg>
                Business Config
            </button>
            <button class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm" id="testing-tab" onclick="switchTab('testing')">
                <svg class="w-4 h-4 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>
                Testing
            </button>
        </nav>
    </div>
</div>

<!-- Tab Content -->
<div id="settingsTabContent">
    <!-- AI Settings Tab -->
    <div id="ai-settings" class="tab-content active">
        <form id="aiSettingsForm">
            <div class="bg-white shadow rounded-lg dark:bg-gray-800 mb-6">
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                        <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path></svg>
                        AI Configuration
                    </h3>
                </div>
                <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div class="flex items-center">
                            <input type="checkbox" id="aiEnabled" name="aiEnabled" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
                            <label for="aiEnabled" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Enable AI Assistant</label>
                        </div>
                        <div class="flex items-center">
                            <input type="checkbox" id="aiAutoReply" name="aiAutoReply" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
                            <label for="aiAutoReply" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Auto Reply</label>
                        </div>
                        <div class="flex items-center">
                            <input type="checkbox" id="aiTriggerRequired" name="aiTriggerRequired" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
                            <label for="aiTriggerRequired" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                                Require Triggers
                                <span class="text-xs text-gray-500 dark:text-gray-400">(If off, AI responds to any message)</span>
                            </label>
                        </div>
                        <div class="flex items-center">
                            <input type="checkbox" id="conversationMemoryEnabled" name="conversationMemoryEnabled" class="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600">
                            <label for="conversationMemoryEnabled" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Conversation Memory</label>
                        </div>
                    </div>
                    <div class="space-y-4">
                        <div>
                            <label for="aiBotName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Bot Name</label>
                            <input type="text" id="aiBotName" name="aiBotName" placeholder="Assistant" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                        </div>
                        <div>
                            <label for="aiLanguage" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Primary Language</label>
                            <select id="aiLanguage" name="aiLanguage" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="id">Bahasa Indonesia</option>
                                <option value="en">English</option>
                                <option value="ms">Bahasa Melayu</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="space-y-4">
                    <div>
                        <label for="aiPromptTemplate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">System Prompt</label>
                        <textarea id="aiPromptTemplate" name="aiPromptTemplate" rows="4" placeholder="You are a helpful AI assistant..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                    </div>

                    <div>
                        <label for="aiTriggers" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Trigger Words</label>
                        <input type="text" id="aiTriggers" name="aiTriggers" placeholder="@help, @support, @ai" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                        <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Comma-separated trigger words</p>
                    </div>

                    <div>
                        <label for="aiRules" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">AI Rules</label>
                        <textarea id="aiRules" name="aiRules" rows="3" placeholder="- Always be polite&#10;- Provide accurate information&#10;- Escalate complex issues" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                    </div>
                </div>
            </div>
        </div>

            <!-- AI Provider Settings -->
            <div class="bg-white shadow rounded-lg dark:bg-gray-800 mb-6">
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                        <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
                        AI Provider Configuration
                    </h3>
                </div>
                <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <label for="aiProvider" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Primary AI Provider</label>
                            <select id="aiProvider" name="aiProvider" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="openai">🤖 OpenAI (GPT-3.5/4)</option>
                                <option value="deepseek">💰 DeepSeek (90% cheaper)</option>
                                <option value="claude">🎯 Claude (High quality)</option>
                                <option value="gemini">📚 Gemini (Large context)</option>
                                <option value="groq">⚡ Groq (Ultra-fast)</option>
                            </select>
                            <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Primary provider for AI responses</p>
                        </div>

                        <div>
                            <label for="aiFallbackProvider" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Fallback Provider</label>
                            <select id="aiFallbackProvider" name="aiFallbackProvider" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="">No fallback</option>
                                <option value="openai">🤖 OpenAI</option>
                                <option value="deepseek">💰 DeepSeek</option>
                                <option value="claude">🎯 Claude</option>
                                <option value="gemini">📚 Gemini</option>
                                <option value="groq">⚡ Groq</option>
                            </select>
                            <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Backup if primary fails</p>
                        </div>

                        <div id="aiModelSection">
                            <label for="aiModel" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">AI Model</label>
                            <select id="aiModel" name="aiModel" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="">Use provider default</option>
                            </select>
                            <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Available models for selected provider</p>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div>
                            <label for="aiTemperature" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">🎨 Creativity (Temperature)</label>
                            <div class="grid grid-cols-4 gap-2">
                                <div class="col-span-3">
                                    <input type="range" id="aiTemperatureRange" min="0" max="2" step="0.1" value="0.7" oninput="updateTemperatureValue(this.value)" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
                                </div>
                                <div class="col-span-1">
                                    <input type="number" id="aiTemperature" name="aiTemperature" min="0" max="2" step="0.1" value="0.7" onchange="updateTemperatureRange(this.value)" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                </div>
                            </div>
                            <div class="flex space-x-2 mt-2">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">0.0-0.3 Focused</span>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">0.4-0.7 Balanced</span>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">0.8-2.0 Creative</span>
                            </div>
                        </div>

                        <div>
                            <label for="aiMaxTokens" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">📏 Response Length</label>
                            <select id="aiMaxTokens" name="aiMaxTokens" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="150">🔸 Short (150 tokens)</option>
                                <option value="300">🔹 Medium (300 tokens)</option>
                                <option value="500" selected>🔶 Standard (500 tokens)</option>
                                <option value="1000">🔷 Long (1000 tokens)</option>
                                <option value="2000">🔸 Very Long (2000 tokens)</option>
                            </select>
                            <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Longer responses cost more</p>
                        </div>
                    </div>
                </div>

                <div class="mt-6">
                    <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                        <h6 class="text-sm font-medium text-gray-900 dark:text-white mb-3">💡 Provider Comparison</h6>
                        <div class="grid grid-cols-1 md:grid-cols-5 gap-4 text-xs">
                            <div class="text-center">
                                <span class="font-medium text-gray-900 dark:text-white">DeepSeek:</span><br>
                                <span class="text-gray-600 dark:text-gray-400">$0.0001/1K tokens</span>
                            </div>
                            <div class="text-center">
                                <span class="font-medium text-gray-900 dark:text-white">OpenAI:</span><br>
                                <span class="text-gray-600 dark:text-gray-400">$0.0015/1K tokens</span>
                            </div>
                            <div class="text-center">
                                <span class="font-medium text-gray-900 dark:text-white">Claude:</span><br>
                                <span class="text-gray-600 dark:text-gray-400">$0.003/1K tokens</span>
                            </div>
                            <div class="text-center">
                                <span class="font-medium text-gray-900 dark:text-white">Groq:</span><br>
                                <span class="text-gray-600 dark:text-gray-400">$0.0001/1K tokens (fast)</span>
                            </div>
                            <div class="text-center">
                                <span class="font-medium text-gray-900 dark:text-white">Gemini:</span><br>
                                <span class="text-gray-600 dark:text-gray-400">$0.0001/1K tokens (large context)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-6">
            <button type="submit" form="aiSettingsForm" class="w-full text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
                Save AI Settings
            </button>
        </div>
    </form>
</div>

    <!-- Business Configuration Tab -->
    <div id="business-config" class="tab-content hidden">
        <form id="businessConfigForm">
            <div class="bg-white shadow rounded-lg dark:bg-gray-800 mb-6">
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                        <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4zM18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z"></path></svg>
                        Business Intelligence
                    </h3>
                </div>
                <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <label for="businessType" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Business Type</label>
                            <select id="businessType" name="businessType" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="">Loading business types...</option>
                            </select>
                        </div>

                        <div>
                            <label for="businessLanguage" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Template Language</label>
                            <select id="businessLanguage" name="businessLanguage" class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
                                <option value="id">Bahasa Indonesia</option>
                                <option value="en">English</option>
                                <option value="ms">Bahasa Melayu</option>
                            </select>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div>
                            <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Template Actions</label>
                            <div class="space-y-2">
                                <button type="button" id="loadBusinessTemplate" class="w-full inline-flex justify-center items-center px-4 py-2 text-sm font-medium text-center text-primary-700 bg-white border border-primary-300 rounded-lg hover:bg-primary-50 focus:ring-4 focus:ring-primary-300 dark:bg-gray-800 dark:text-primary-400 dark:border-primary-600 dark:hover:bg-gray-700 dark:focus:ring-primary-800">
                                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path></svg>
                                    Load Business Template
                                </button>
                                <button type="button" id="previewTemplate" class="w-full inline-flex justify-center items-center px-4 py-2 text-sm font-medium text-center text-blue-700 bg-white border border-blue-300 rounded-lg hover:bg-blue-50 focus:ring-4 focus:ring-blue-300 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-600 dark:hover:bg-gray-700 dark:focus:ring-blue-800">
                                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path><path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"></path></svg>
                                    Preview Template
                                </button>
                                <div id="templateStatus" class="text-xs text-gray-500 dark:text-gray-400">
                                    Select business type to load template
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="space-y-4">
                    <div>
                        <label for="productKnowledge" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Product Knowledge Base</label>
                        <textarea id="productKnowledge" name="productKnowledge" rows="5" placeholder="Product catalog, pricing, inventory, specifications..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                        <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Detailed product information, pricing, and policies</p>
                    </div>

                    <div>
                        <label for="salesScripts" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Sales Scripts & Responses</label>
                        <textarea id="salesScripts" name="salesScripts" rows="5" placeholder="Sales scripts, greetings, objection handling..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                        <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">Sales strategies, greetings, and closing techniques</p>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="upsellStrategies" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Upsell Strategies</label>
                            <textarea id="upsellStrategies" name="upsellStrategies" rows="3" placeholder="Cross-selling and upselling techniques..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                        </div>
                        <div>
                            <label for="objectionHandling" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Objection Handling</label>
                            <textarea id="objectionHandling" name="objectionHandling" rows="3" placeholder="Common objections and responses..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-6">
            <button type="submit" form="businessConfigForm" class="w-full text-white bg-green-600 hover:bg-green-700 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
                <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
                Save Business Configuration
            </button>
        </div>
    </form>
</div>

    <!-- Testing Tab -->
    <div id="testing" class="tab-content hidden">
        <div class="bg-white shadow rounded-lg dark:bg-gray-800">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                    <svg class="w-5 h-5 mr-2 inline" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>
                    AI Response Testing
                </h3>
            </div>
            <div class="p-6">
                <form id="aiTestForm">
                    <div class="space-y-4">
                        <div>
                            <label for="testMessage" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Test Message</label>
                            <textarea id="testMessage" name="testMessage" rows="3" placeholder="Type a message to test AI response..." class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"></textarea>
                        </div>
                        <div>
                            <button type="submit" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 rounded-lg dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path></svg>
                                Test AI Response
                            </button>
                        </div>
                        <div id="testResult" class="mt-4"></div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

    <style>
        .bg-primary-50 { background-color: #eff6ff; }
        .bg-primary-100 { background-color: #dbeafe; }
        .bg-primary-500 { background-color: #3b82f6; }
        .bg-primary-600 { background-color: #2563eb; }
        .bg-primary-700 { background-color: #1d4ed8; }
        .bg-primary-800 { background-color: #1e40af; }
        .text-primary-600 { color: #2563eb; }
        .text-primary-700 { color: #1d4ed8; }
        .border-primary-300 { border-color: #93c5fd; }
        .border-primary-500 { border-color: #3b82f6; }
        .focus\:ring-primary-300:focus { box-shadow: 0 0 0 3px rgba(147, 197, 253, 0.5); }
        .focus\:ring-primary-500:focus { box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5); }
        .focus\:ring-primary-800:focus { box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.5); }
        .focus\:border-primary-500:focus { border-color: #3b82f6; }
        .hover\:bg-primary-800:hover { background-color: #1e40af; }
        .hover\:bg-primary-700:hover { background-color: #1d4ed8; }
        .dark .dark\:bg-primary-600 { background-color: #2563eb; }
        .dark .dark\:hover\:bg-primary-700:hover { background-color: #1d4ed8; }
        .dark .dark\:focus\:ring-primary-800:focus { box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.5); }
        .dark .dark\:focus\:ring-primary-600:focus { box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.5); }
        
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        
        /* Range slider styling */
        input[type="range"] {
            -webkit-appearance: none;
            appearance: none;
            background: transparent;
            cursor: pointer;
        }
        
        input[type="range"]::-webkit-slider-track {
            background: #e5e7eb;
            height: 8px;
            border-radius: 4px;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            background: #3b82f6;
            height: 20px;
            width: 20px;
            border-radius: 50%;
            cursor: pointer;
        }
        
        input[type="range"]::-moz-range-track {
            background: #e5e7eb;
            height: 8px;
            border-radius: 4px;
        }
        
        input[type="range"]::-moz-range-thumb {
            background: #3b82f6;
            height: 20px;
            width: 20px;
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }
        
        .dark input[type="range"]::-webkit-slider-track {
            background: #374151;
        }
        
        .dark input[type="range"]::-moz-range-track {
            background: #374151;
        }
    </style>

    <script>
        // Tab switching function
        function switchTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.classList.add('hidden');
                content.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            const tabButtons = document.querySelectorAll('[id$="-tab"]');
            tabButtons.forEach(button => {
                button.classList.remove('border-primary-500', 'text-primary-600');
                button.classList.add('border-transparent', 'text-gray-500');
            });
            
            // Show selected tab content
            const selectedTab = document.getElementById(tabName);
            if (selectedTab) {
                selectedTab.classList.remove('hidden');
                selectedTab.classList.add('active');
            }
            
            // Add active class to selected tab button
            const selectedButton = document.getElementById(tabName + '-tab');
            if (selectedButton) {
                selectedButton.classList.remove('border-transparent', 'text-gray-500');
                selectedButton.classList.add('border-primary-500', 'text-primary-600');
            }
        }
      // Configuration
      const API_BASE_URL = "/api/whatsapp";
      const BUSINESS_API_URL = "/api/business-templates";
              const API_TOKEN = "<%= process.env.WHATSAPP_API_TOKEN || 'test123' %>";
      const DEVICE_ID = "<%= deviceId %>";

              // Initialize page
        document.addEventListener("DOMContentLoaded", function () {
          loadDeviceAI();
          loadBusinessTypes();
          initializeProviderModels();

          // Event listeners
          document
            .getElementById("businessType")
            .addEventListener("change", onBusinessTypeChange);
          document
            .getElementById("businessLanguage")
            .addEventListener("change", onBusinessTypeChange);
          document
            .getElementById("loadBusinessTemplate")
            .addEventListener("click", loadSelectedTemplate);
          document
            .getElementById("previewTemplate")
            .addEventListener("click", previewSelectedTemplate);
          document
            .getElementById("aiSettingsForm")
            .addEventListener("submit", updateDeviceAI);
          document
            .getElementById("businessConfigForm")
            .addEventListener("submit", saveBusinessConfig);
          document
            .getElementById("aiTestForm")
            .addEventListener("submit", testAIResponse);
          document
            .getElementById("aiProvider")
            .addEventListener("change", onProviderChange);
          
          // New event listeners for header buttons
          document
            .getElementById("saveAllSettingsBtn")
            .addEventListener("click", saveAllSettings);
          document
            .getElementById("testAIBtn")
            .addEventListener("click", testAIConfiguration);
        });

      // Load available business types
      async function loadBusinessTypes() {
        try {
          const response = await fetch(`${BUSINESS_API_URL}/types`);
          const data = await response.json();

          if (data.success) {
            const select = document.getElementById("businessType");
            select.innerHTML =
              '<option value="">Select business type...</option>';

            data.businessTypes.forEach((type) => {
              const option = document.createElement("option");
              option.value = type;
              option.textContent = formatBusinessType(type);
              select.appendChild(option);
            });
          }
        } catch (error) {
          console.error("Failed to load business types:", error);
        }
      }

      // Format business type for display
      function formatBusinessType(type) {
        const types = {
          ecommerce: "🛒 E-commerce",
          restaurant: "🍕 Restaurant",
          healthcare: "🏥 Healthcare",
          education: "📚 Education",
          "real-estate": "🏠 Real Estate",
          travel: "✈️ Travel",
          automotive: "🚗 Automotive",
          finance: "💰 Finance",
          beauty: "💄 Beauty",
        };
        return types[type] || type.charAt(0).toUpperCase() + type.slice(1);
      }

              // Load business template
        async function loadSelectedTemplate() {
          const businessType = document.getElementById("businessType").value;
          const language = document.getElementById("businessLanguage").value;

          if (!businessType) {
            document.getElementById("templateStatus").textContent =
              "Please select a business type first";
            return;
          }

          try {
            document.getElementById("templateStatus").textContent =
              "Loading template...";
            const response = await fetch(
              `${BUSINESS_API_URL}/${businessType}/${language}`
            );
            const data = await response.json();

            if (data.success && data.template) {
              const template = data.template;

              // Fill form fields with template data
              document.getElementById("aiBotName").value = template.botName || "";
              document.getElementById("aiPromptTemplate").value =
                template.prompt || "";
              document.getElementById("productKnowledge").value =
                template.productKnowledge || "";
              document.getElementById("salesScripts").value =
                template.salesScripts || "";
              document.getElementById("aiRules").value =
                template.businessRules || "";
              document.getElementById("aiTriggers").value =
                template.triggers || "";

              // Fill additional template fields if they exist
              if (document.getElementById("upsellStrategies")) {
                document.getElementById("upsellStrategies").value =
                  typeof template.upsellStrategies === "object"
                    ? Object.entries(template.upsellStrategies || {})
                        .map(([key, value]) => `${key}: ${value}`)
                        .join("\n")
                    : template.upsellStrategies || "";
              }
              if (document.getElementById("objectionHandling")) {
                document.getElementById("objectionHandling").value =
                  typeof template.objectionHandling === "object"
                    ? Object.entries(template.objectionHandling || {})
                        .map(([key, value]) => `${key}: ${value}`)
                        .join("\n")
                    : template.objectionHandling || "";
              }

              document.getElementById("templateStatus").innerHTML = `
                <span class="text-green-600 dark:text-green-400">✅ Template loaded successfully!</span><br>
                <small>${formatBusinessType(businessType)} - ${getLanguageName(
                language
              )}</small>
              `;
              showAlert("✅ Business template loaded successfully!", 'success');
            } else {
              document.getElementById("templateStatus").textContent =
                "Template not found for this business type and language";
              showAlert("⚠️ Template not found for this business type and language", 'warning');
            }
          } catch (error) {
            console.error("Failed to load template:", error);
            document.getElementById("templateStatus").textContent =
              "Failed to load template";
            showAlert("❌ Failed to load template", 'error');
          }
        }

      // Get language display name
      function getLanguageName(code) {
        const languages = {
          id: "Bahasa Indonesia",
          en: "English",
          ms: "Bahasa Melayu",
        };
        return languages[code] || code;
      }

              // Preview selected template
        async function previewSelectedTemplate() {
          const businessType = document.getElementById("businessType").value;
          const language = document.getElementById("businessLanguage").value;

          if (!businessType) {
            showAlert("Please select a business type first", 'warning');
            return;
          }

          try {
            const response = await fetch(
              `${BUSINESS_API_URL}/${businessType}/${language}`
            );
            const data = await response.json();

            if (data.success && data.template) {
              const template = data.template;
              showAlert("📋 Template preview loaded successfully!", 'info');
              
              // For now, just load the template directly since we don't have Bootstrap modal
              loadSelectedTemplate();
            } else {
              showAlert("Template not found for this business type and language", 'warning');
            }
          } catch (error) {
            console.error("Failed to preview template:", error);
            showAlert("Failed to preview template", 'error');
          }
        }

      // Handle business type change
      function onBusinessTypeChange() {
        document.getElementById("templateStatus").textContent =
          "Click 'Load Business Template' to apply selected template";
      }

      // Load device AI settings
      async function loadDeviceAI() {
        try {
          const response = await fetch(
            `${API_BASE_URL}/devices/${DEVICE_ID}/settings/ai`,
            {
              headers: { "X-API-Token": API_TOKEN },
            }
          );

          if (!response.ok) throw new Error(`HTTP ${response.status}`);

          const result = await response.json();
          console.log(result);
          
          // Extract data from the nested structure
          const data = result.data || result;

          // Populate form fields with proper boolean handling
          document.getElementById("aiEnabled").checked = data.aiEnabled === true;
          document.getElementById("aiAutoReply").checked = data.aiAutoReply === true;
          document.getElementById("aiTriggerRequired").checked = data.aiTriggerRequired === true;
          document.getElementById("conversationMemoryEnabled").checked = data.conversationMemoryEnabled === true;
          
          document.getElementById("aiBotName").value = data.aiBotName || "";
          document.getElementById("aiLanguage").value = data.aiLanguage || "id";
          document.getElementById("aiMaxTokens").value = data.aiMaxTokens || 500;
          document.getElementById("aiTemperature").value = data.aiTemperature || 0.7;
          document.getElementById("aiPromptTemplate").value = data.aiPromptTemplate || "";
          document.getElementById("aiTriggers").value = data.aiTriggers
            ? data.aiTriggers.join(", ")
            : "";
          document.getElementById("aiRules").value = data.aiRules
            ? data.aiRules.join("\n")
            : "";

          // AI Provider settings
          document.getElementById("aiProvider").value = data.aiProvider || "openai";
          document.getElementById("aiFallbackProvider").value = data.aiFallbackProvider || "";

          // Update models for current provider
          onProviderChange();
          setTimeout(() => {
            document.getElementById("aiModel").value = data.aiModel || "";
          }, 100);

          // Update temperature controls
          updateTemperatureValue(data.aiTemperature || 0.7);
          updateTemperatureRange(data.aiTemperature || 0.7);

          // Business fields
          document.getElementById("productKnowledge").value = data.productKnowledge || "";
          document.getElementById("salesScripts").value = data.salesScripts || "";
          document.getElementById("businessType").value = data.businessType || "";

          // Additional business fields
          if (document.getElementById("upsellStrategies")) {
            document.getElementById("upsellStrategies").value =
              typeof data.upsellStrategies === "object"
                ? Object.entries(data.upsellStrategies || {})
                    .map(([key, value]) => `${key}: ${value}`)
                    .join("\n")
                : data.upsellStrategies || "";
          }
          if (document.getElementById("objectionHandling")) {
            document.getElementById("objectionHandling").value =
              typeof data.objectionHandling === "object"
                ? Object.entries(data.objectionHandling || {})
                    .map(([key, value]) => `${key}: ${value}`)
                    .join("\n")
                : data.objectionHandling || "";
          }

          console.log("✅ Device AI settings loaded");
        } catch (error) {
          console.error("Failed to load device AI settings:", error);
        }
      }

      // Update device AI settings
      async function updateDeviceAI(event) {
        event.preventDefault();

        const form = event.target;
        const formData = new FormData(form);

        const settings = {
          aiEnabled: formData.has("aiEnabled"),
          aiAutoReply: formData.has("aiAutoReply"),
          aiTriggerRequired: formData.has("aiTriggerRequired"),
          conversationMemoryEnabled: formData.has("conversationMemoryEnabled"),
          aiBotName: formData.get("aiBotName"),
          aiLanguage: formData.get("aiLanguage"),
          aiMaxTokens: parseInt(formData.get("aiMaxTokens")),
          aiTemperature: parseFloat(formData.get("aiTemperature")),
          aiPromptTemplate: formData.get("aiPromptTemplate"),
          aiTriggers: formData
            .get("aiTriggers")
            .split(",")
            .map((t) => t.trim())
            .filter((t) => t),
          aiRules: formData
            .get("aiRules")
            .split("\n")
            .map((r) => r.trim())
            .filter((r) => r),
          // AI Provider settings
          aiProvider: formData.get("aiProvider"),
          aiFallbackProvider: formData.get("aiFallbackProvider"),
          aiModel: formData.get("aiModel"),
          productKnowledge: formData.get("productKnowledge"),
          salesScripts: formData.get("salesScripts"),
          businessType: formData.get("businessType"),
          upsellStrategies:
            document.getElementById("upsellStrategies")?.value || "",
          objectionHandling:
            document.getElementById("objectionHandling")?.value || "",
        };

        try {
          const response = await fetch(
            `${API_BASE_URL}/devices/${DEVICE_ID}/settings/ai`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                "X-API-Token": API_TOKEN,
              },
              body: JSON.stringify(settings),
            }
          );

          if (!response.ok) throw new Error(`HTTP ${response.status}`);

          const result = await response.json();
          alert("✅ AI settings updated successfully!");
          console.log("AI settings updated:", result);
        } catch (error) {
          console.error("Failed to update AI settings:", error);
          alert("❌ Failed to update AI settings");
        }
      }

      // Save business configuration
      async function saveBusinessConfig(event) {
        event.preventDefault();

        const settings = {
          productKnowledge: document.getElementById("productKnowledge").value,
          salesScripts: document.getElementById("salesScripts").value,
          businessType: document.getElementById("businessType").value,
          upsellStrategies:
            document.getElementById("upsellStrategies")?.value || "",
          objectionHandling:
            document.getElementById("objectionHandling")?.value || "",
        };

        try {
          const response = await fetch(
            `${API_BASE_URL}/devices/${DEVICE_ID}/settings/ai`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                "X-API-Token": API_TOKEN,
              },
              body: JSON.stringify(settings),
            }
          );

          if (!response.ok) throw new Error(`HTTP ${response.status}`);

          alert("✅ Business configuration saved successfully!");
        } catch (error) {
          console.error("Failed to save business config:", error);
          alert("❌ Failed to save business configuration");
        }
      }

      // Test AI response
      async function testAIResponse(event) {
        event.preventDefault();

        const message = document.getElementById("testMessage").value.trim();
        if (!message) {
          alert("Please enter a test message");
          return;
        }

        const resultDiv = document.getElementById("testResult");
        resultDiv.innerHTML =
          '<div class="text-muted">🤖 Testing AI response...</div>';

        try {
          const response = await fetch(`${API_BASE_URL}/test-ai`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-API-Token": API_TOKEN,
            },
            body: JSON.stringify({
              deviceId: DEVICE_ID,
              message: message,
            }),
          });

          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
          }

          const result = await response.json();

          if (result.success && result.response) {
            resultDiv.innerHTML = `
              <div class="alert alert-success">
                <h6>🤖 AI Response:</h6>
                <p class="mb-2">${result.response}</p>
                <small class="text-muted">
                  <strong>Settings:</strong> ${result.settings.botName} | 
                  Temp: ${result.settings.temperature} | 
                  Tokens: ${result.settings.maxTokens} | 
                  Lang: ${result.settings.language}
                </small>
              </div>
            `;
          } else {
            resultDiv.innerHTML = `
              <div class="alert alert-warning">
                <h6>⚠️ No AI Response:</h6>
                <p class="mb-0">${
                  result.message || "AI did not generate a response"
                }</p>
              </div>
            `;
          }
        } catch (error) {
          console.error("Failed to test AI:", error);
          resultDiv.innerHTML = `
            <div class="alert alert-danger">
              <h6>❌ Error:</h6>
              <p class="mb-0">${error.message}</p>
              <small class="text-muted">Make sure the server is running and try restarting it to pick up route changes.</small>
            </div>
          `;
        }
      }

      // AI Provider Models Configuration
      const AI_MODELS = {
        openai: [
          { value: "gpt-3.5-turbo", label: "GPT-3.5 Turbo (Fast & Cheap)" },
          { value: "gpt-4o-mini", label: "GPT-4o Mini (Better Quality)" },
          { value: "gpt-4o", label: "GPT-4o (Best Quality)" },
          { value: "gpt-4-turbo", label: "GPT-4 Turbo (Advanced)" },
        ],
        deepseek: [
          { value: "deepseek-chat", label: "DeepSeek Chat (General)" },
          { value: "deepseek-coder", label: "DeepSeek Coder (Programming)" },
          { value: "deepseek-math", label: "DeepSeek Math (Mathematics)" },
        ],
        claude: [
          {
            value: "claude-3-5-sonnet-20241022",
            label: "Claude 3.5 Sonnet (Latest)",
          },
          {
            value: "claude-3-5-haiku-20241022",
            label: "Claude 3.5 Haiku (Fast)",
          },
          { value: "claude-3-opus-20240229", label: "Claude 3 Opus (Premium)" },
        ],
        gemini: [
          { value: "gemini-1.5-flash", label: "Gemini 1.5 Flash (Fast)" },
          { value: "gemini-1.5-pro", label: "Gemini 1.5 Pro (Advanced)" },
          { value: "gemini-pro", label: "Gemini Pro (Standard)" },
        ],
        groq: [
          {
            value: "llama-3.1-70b-versatile",
            label: "Llama 3.1 70B (Versatile)",
          },
          { value: "llama-3.1-8b-instant", label: "Llama 3.1 8B (Ultra Fast)" },
          {
            value: "mixtral-8x7b-32768",
            label: "Mixtral 8x7B (Large Context)",
          },
          { value: "gemma2-9b-it", label: "Gemma2 9B (Efficient)" },
        ],
      };

      // Initialize provider models
      function initializeProviderModels() {
        onProviderChange(); // Load models for default provider
      }

      // Handle provider change
      function onProviderChange() {
        const provider = document.getElementById("aiProvider").value;
        const modelSelect = document.getElementById("aiModel");

        // Clear existing options
        modelSelect.innerHTML =
          '<option value="">Use provider default</option>';

        if (provider && AI_MODELS[provider]) {
          AI_MODELS[provider].forEach((model) => {
            const option = document.createElement("option");
            option.value = model.value;
            option.textContent = model.label;
            modelSelect.appendChild(option);
          });
        }
      }

              // Temperature control functions
        function updateTemperatureValue(value) {
          document.getElementById("aiTemperature").value = value;
          document.getElementById("aiTemperatureRange").value = value;
        }

        function updateTemperatureRange(value) {
          document.getElementById("aiTemperature").value = value;
          document.getElementById("aiTemperatureRange").value = value;
        }

        // Alert function (consistent with messages.ejs)
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alert-container');
            if (!alertContainer) return;

            const alertTypes = {
                success: 'bg-green-100 border-green-500 text-green-700 dark:bg-green-900 dark:border-green-600 dark:text-green-300',
                error: 'bg-red-100 border-red-500 text-red-700 dark:bg-red-900 dark:border-red-600 dark:text-red-300',
                warning: 'bg-yellow-100 border-yellow-500 text-yellow-700 dark:bg-yellow-900 dark:border-yellow-600 dark:text-yellow-300',
                info: 'bg-blue-100 border-blue-500 text-blue-700 dark:bg-blue-900 dark:border-blue-600 dark:text-blue-300'
            };

            const iconTypes = {
                success: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>',
                error: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
                warning: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
                info: '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>'
            };

            const alertId = 'alert-' + Date.now();
            const alertElement = document.createElement('div');
            alertElement.id = alertId;
            alertElement.className = `flex items-center p-4 mb-4 border rounded-lg ${alertTypes[type] || alertTypes.info}`;
            alertElement.innerHTML = `
                <div class="flex-shrink-0">
                    ${iconTypes[type] || iconTypes.info}
                </div>
                <div class="ml-3 text-sm font-medium">
                    ${message}
                </div>
                <button type="button" class="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:hover:bg-gray-700" onclick="document.getElementById('${alertId}').remove()">
                    <span class="sr-only">Close</span>
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            `;

            alertContainer.appendChild(alertElement);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (document.getElementById(alertId)) {
                    document.getElementById(alertId).remove();
                }
            }, 5000);
        }

        // Update existing functions to use showAlert instead of alert()
        // Update device AI settings
        async function updateDeviceAI(event) {
            event.preventDefault();

            const form = event.target;
            const formData = new FormData(form);

            const settings = {
                aiEnabled: formData.has("aiEnabled"),
                aiAutoReply: formData.has("aiAutoReply"),
                aiTriggerRequired: formData.has("aiTriggerRequired"),
                conversationMemoryEnabled: formData.has("conversationMemoryEnabled"),
                aiBotName: formData.get("aiBotName"),
                aiLanguage: formData.get("aiLanguage"),
                aiMaxTokens: parseInt(formData.get("aiMaxTokens")),
                aiTemperature: parseFloat(formData.get("aiTemperature")),
                aiPromptTemplate: formData.get("aiPromptTemplate"),
                aiTriggers: formData
                    .get("aiTriggers")
                    .split(",")
                    .map((t) => t.trim())
                    .filter((t) => t),
                aiRules: formData
                    .get("aiRules")
                    .split("\n")
                    .map((r) => r.trim())
                    .filter((r) => r),
                // AI Provider settings
                aiProvider: formData.get("aiProvider"),
                aiFallbackProvider: formData.get("aiFallbackProvider"),
                aiModel: formData.get("aiModel"),
                productKnowledge: formData.get("productKnowledge"),
                salesScripts: formData.get("salesScripts"),
                businessType: formData.get("businessType"),
                upsellStrategies:
                    document.getElementById("upsellStrategies")?.value || "",
                objectionHandling:
                    document.getElementById("objectionHandling")?.value || "",
            };

            try {
                const response = await fetch(
                    `${API_BASE_URL}/devices/${DEVICE_ID}/settings/ai`,
                    {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            "X-API-Token": API_TOKEN,
                        },
                        body: JSON.stringify(settings),
                    }
                );

                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const result = await response.json();
                showAlert("✅ AI settings updated successfully!", 'success');
                console.log("AI settings updated:", result);
            } catch (error) {
                console.error("Failed to update AI settings:", error);
                showAlert("❌ Failed to update AI settings", 'error');
            }
        }

        // Save business configuration
        async function saveBusinessConfig(event) {
            event.preventDefault();

            const settings = {
                productKnowledge: document.getElementById("productKnowledge").value,
                salesScripts: document.getElementById("salesScripts").value,
                businessType: document.getElementById("businessType").value,
                upsellStrategies:
                    document.getElementById("upsellStrategies")?.value || "",
                objectionHandling:
                    document.getElementById("objectionHandling")?.value || "",
            };

            try {
                const response = await fetch(
                    `${API_BASE_URL}/devices/${DEVICE_ID}/settings/ai`,
                    {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            "X-API-Token": API_TOKEN,
                        },
                        body: JSON.stringify(settings),
                    }
                );

                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                showAlert("✅ Business configuration saved successfully!", 'success');
            } catch (error) {
                console.error("Failed to save business config:", error);
                showAlert("❌ Failed to save business configuration", 'error');
            }
        }

        // Test AI response
        async function testAIResponse(event) {
            event.preventDefault();

            const message = document.getElementById("testMessage").value.trim();
            if (!message) {
                showAlert("Please enter a test message", 'warning');
                return;
            }

            const resultDiv = document.getElementById("testResult");
            resultDiv.innerHTML = '<div class="text-gray-500 dark:text-gray-400">🤖 Testing AI response...</div>';

            try {
                const response = await fetch(`${API_BASE_URL}/test-ai`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-API-Token": API_TOKEN,
                    },
                    body: JSON.stringify({
                        deviceId: DEVICE_ID,
                        message: message,
                    }),
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                const result = await response.json();

                if (result.success && result.response) {
                    resultDiv.innerHTML = `
                        <div class="p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg dark:bg-green-900 dark:border-green-600 dark:text-green-300">
                            <h6 class="font-medium mb-2">🤖 AI Response:</h6>
                            <p class="mb-2">${result.response}</p>
                            <small class="text-gray-600 dark:text-gray-400">
                                <strong>Settings:</strong> ${result.settings.botName} | 
                                Temp: ${result.settings.temperature} | 
                                Tokens: ${result.settings.maxTokens} | 
                                Lang: ${result.settings.language}
                            </small>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="p-4 bg-yellow-100 border border-yellow-400 text-yellow-700 rounded-lg dark:bg-yellow-900 dark:border-yellow-600 dark:text-yellow-300">
                            <h6 class="font-medium mb-2">⚠️ No AI Response:</h6>
                            <p class="mb-0">${result.message || "AI did not generate a response"}</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error("Failed to test AI:", error);
                resultDiv.innerHTML = `
                    <div class="p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg dark:bg-red-900 dark:border-red-600 dark:text-red-300">
                        <h6 class="font-medium mb-2">❌ Error:</h6>
                        <p class="mb-0">${error.message}</p>
                        <small class="text-gray-600 dark:text-gray-400">Make sure the server is running and try restarting it to pick up route changes.</small>
                    </div>
                `;
            }
        }

        // Save all settings function
        async function saveAllSettings() {
            try {
                // Trigger both form submissions
                const aiForm = document.getElementById('aiSettingsForm');
                const businessForm = document.getElementById('businessConfigForm');
                
                // Create and dispatch submit events
                const aiEvent = new Event('submit', { bubbles: true, cancelable: true });
                const businessEvent = new Event('submit', { bubbles: true, cancelable: true });
                
                aiForm.dispatchEvent(aiEvent);
                businessForm.dispatchEvent(businessEvent);
                
                showAlert("✅ All settings saved successfully!", 'success');
            } catch (error) {
                console.error("Failed to save all settings:", error);
                showAlert("❌ Failed to save all settings", 'error');
            }
        }

        // Test AI configuration function
        async function testAIConfiguration() {
            try {
                const testMessage = "Hello, can you help me?";
                const resultDiv = document.getElementById("testResult");
                
                // Switch to testing tab
                switchTab('testing');
                
                // Set test message
                document.getElementById("testMessage").value = testMessage;
                
                // Trigger test
                const testEvent = new Event('submit', { bubbles: true, cancelable: true });
                document.getElementById('aiTestForm').dispatchEvent(testEvent);
                
                showAlert("🧪 AI configuration test initiated", 'info');
            } catch (error) {
                console.error("Failed to test AI configuration:", error);
                showAlert("❌ Failed to test AI configuration", 'error');
            }
        }
    </script>
</div>
</body>
</html> 